{"version":3,"sources":["webpack:///src/app/navigationpages/blog/dev/developer-blog.module.ts.pre-build-optimizer.js","webpack:///src/app/navigationpages/blog/dev/developer-blog.module.ts","webpack:///src/app/navigationpages/blog/dev/developer-blog.component.ngfactory.js.pre-build-optimizer.js","webpack:///src/app/navigationpages/blog/dev/developer-blog.component.html","webpack:///src/app/navigationpages/blog/dev/post/graphql/graphql.component.ngfactory.js.pre-build-optimizer.js","webpack:///src/app/navigationpages/blog/dev/post/graphql/graphql.component.scss.shim.ngstyle.js.pre-build-optimizer.js","webpack:///src/app/navigationpages/blog/dev/post/graphql/graphql.component.html","webpack:///src/app/navigationpages/blog/dev/post/rs-hs/rs-hs.component.ngfactory.js.pre-build-optimizer.js","webpack:///src/app/navigationpages/blog/dev/post/rs-hs/rs-hs.component.html","webpack:///src/app/navigationpages/blog/dev/post/ng-piao-liang-hanzi/ng-plh.component.ngfactory.js.pre-build-optimizer.js","webpack:///src/app/navigationpages/blog/dev/post/ng-piao-liang-hanzi/ng-plh.component.scss.shim.ngstyle.js.pre-build-optimizer.js","webpack:///src/app/navigationpages/blog/dev/post/ng-piao-liang-hanzi/ng-plh.component.html","webpack:///src/app/navigationpages/blog/dev/post/spectator-testing/spectator-testing.component.ngfactory.js.pre-build-optimizer.js","webpack:///src/app/navigationpages/blog/dev/post/spectator-testing/spectator-testing.component.html","webpack:///src/app/navigationpages/blog/dev/post/automated-devops/automated-devops.component.ngfactory.js.pre-build-optimizer.js","webpack:///src/app/navigationpages/blog/dev/post/automated-devops/automated-devops.component.html","webpack:///src/app/navigationpages/blog/dev/post/chinese-ocr-tool/chinese-ocr-tool.component.ngfactory.js.pre-build-optimizer.js","webpack:///src/app/navigationpages/blog/dev/post/chinese-ocr-tool/chinese-ocr-tool.component.html","webpack:///src/app/navigationpages/blog/dev/developer-blog.module.ngfactory.js.pre-build-optimizer.js"],"names":["Éµ0","developer_blog_routing_module","a","DeveloperBlogModule","RenderType_DeveloperBlogComponent","core","nb","encapsulation","styles","data","View_DeveloperBlogComponent_0","_l","Lb","pb","blog_overview_component_ngfactory","b","ob","blog_overview_component","router","l","blogTitle","blogPosts","_ck","_v","_co","component","posts","View_DeveloperBlogComponent_Host_0","developer_blog_component","DeveloperBlogComponentNgFactory","lb","RenderType_GraphqlComponent","View_GraphqlComponent_0","blog_post_component_ngfactory","blog_post_component","common","d","postTitle","postDate","postAbstract","Jb","ngx_highlightjs","k","c","code","languages","Cb","currVal_5","currVal_8","currVal_13","currVal_16","currVal_19","currVal_22","currVal_33","currVal_36","View_GraphqlComponent_Host_0","graphql_component","GraphqlComponentNgFactory","RenderType_RsHsComponent","View_RsHsComponent_0","View_RsHsComponent_Host_0","rs_hs_component","RsHsComponentNgFactory","RenderType_NgPlhComponent","View_NgPlhComponent_0","en","$event","ad","Bb","onClick","button","ctrlKey","metaKey","shiftKey","o","i","routerLink","currVal_11","currVal_14","currVal_17","target","href","View_NgPlhComponent_Host_0","ng_plh_component","NgPlhComponentNgFactory","RenderType_SpectatorTestingComponent","View_SpectatorTestingComponent_0","currVal_20","currVal_23","currVal_26","currVal_29","View_SpectatorTestingComponent_Host_0","spectator_testing_component","SpectatorTestingComponentNgFactory","RenderType_AutomatedDevopsComponent","View_AutomatedDevopsComponent_0","View_AutomatedDevopsComponent_Host_0","automated_devops_component","AutomatedDevopsComponentNgFactory","RenderType_ChineseOcrToolComponent","View_ChineseOcrToolComponent_0","View_ChineseOcrToolComponent_Host_0","chinese_ocr_tool_component","ChineseOcrToolComponentNgFactory","__webpack_require__","__webpack_exports__","DeveloperBlogModuleNgFactory","mb","yb","zb","j","X","router_ngfactory","v","n","m","s","x","fesm2015_forms","p","u","blog_sidebar_category_module","blog_sidebar_search_module","blog_sidebar_module","blog_overview_module","blog_post_module","shared_module","path","e","f","g","h"],"mappings":"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","file":"15-es2015.585c33a03be52a6ce3e1.js","sourcesContent":["import { DEV_BLOG_ROUTES } from './developer-blog-routing.module';\nconst Éµ0 = DEV_BLOG_ROUTES;\nexport class DeveloperBlogModule {\n}\nexport { Éµ0 };\n","import {NgModule} from '@angular/core';\r\n\r\nimport {SharedModule} from '../../../shared/shared.module';\r\nimport {DeveloperBlogRoutingModule, DEV_BLOG_ROUTES} from './developer-blog-routing.module';\r\nimport {DeveloperBlogComponent} from './developer-blog.component';\r\nimport {GraphqlComponent} from './post/graphql/graphql.component';\r\nimport {RsHsComponent} from './post/rs-hs/rs-hs.component';\r\nimport {HighlightModule} from 'ngx-highlightjs';\r\nimport {NgPlhComponent} from './post/ng-piao-liang-hanzi/ng-plh.component';\r\nimport {SpectatorTestingComponent} from './post/spectator-testing/spectator-testing.component';\r\n\r\n@NgModule({\r\n    imports: [SharedModule, DeveloperBlogRoutingModule, HighlightModule],\r\n    exports: [DeveloperBlogRoutingModule.components],\r\n    declarations: [DeveloperBlogRoutingModule.components],\r\n    providers: [{provide: 'DEV_ROUTES', useValue: DEV_BLOG_ROUTES}]\r\n})\r\nexport class DeveloperBlogModule {\r\n}\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../shared/blog-overview/blog-overview.component.ngfactory\";\nimport * as i2 from \"../../../shared/blog-overview/blog-overview.component\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./developer-blog.component\";\nvar styles_DeveloperBlogComponent = [];\nvar RenderType_DeveloperBlogComponent = i0.Éµcrt({ encapsulation: 2, styles: styles_DeveloperBlogComponent, data: {} });\nexport { RenderType_DeveloperBlogComponent as RenderType_DeveloperBlogComponent };\nexport function View_DeveloperBlogComponent_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 2, \"div\", [[\"class\", \"container clearfix\"]], null, null, null, null, null)), (_l()(), i0.Éµeld(1, 0, null, null, 1, \"app-blog-overview\", [], null, null, null, i1.View_BlogOverviewComponent_0, i1.RenderType_BlogOverviewComponent)), i0.Éµdid(2, 114688, null, 0, i2.BlogOverviewComponent, [i3.ActivatedRoute, i3.Router], { blogTitle: [0, \"blogTitle\"], blogPosts: [1, \"blogPosts\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.blogTitle; var currVal_1 = _co.posts; _ck(_v, 2, 0, currVal_0, currVal_1); }, null); }\nexport function View_DeveloperBlogComponent_Host_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 1, \"app-developer-blog\", [], null, null, null, View_DeveloperBlogComponent_0, RenderType_DeveloperBlogComponent)), i0.Éµdid(1, 114688, null, 0, i4.DeveloperBlogComponent, [\"DEV_ROUTES\"], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar DeveloperBlogComponentNgFactory = i0.Éµccf(\"app-developer-blog\", i4.DeveloperBlogComponent, View_DeveloperBlogComponent_Host_0, {}, {}, []);\nexport { DeveloperBlogComponentNgFactory as DeveloperBlogComponentNgFactory };\n","<div class=\"container clearfix\">\r\n    <app-blog-overview\r\n        [blogTitle]=\"blogTitle\"\r\n        [blogPosts]=\"posts\">\r\n    </app-blog-overview>\r\n</div>\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./graphql.component.scss.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"../../../../../shared/blog-post/blog-post.component.ngfactory\";\nimport * as i3 from \"../../../../../shared/blog-post/blog-post.component\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"ngx-highlightjs\";\nimport * as i6 from \"./graphql.component\";\nvar styles_GraphqlComponent = [i0.styles];\nvar RenderType_GraphqlComponent = i1.Éµcrt({ encapsulation: 0, styles: styles_GraphqlComponent, data: {} });\nexport { RenderType_GraphqlComponent as RenderType_GraphqlComponent };\nexport function View_GraphqlComponent_0(_l) { return i1.Éµvid(0, [(_l()(), i1.Éµeld(0, 0, null, null, 206, \"app-blog-post\", [], null, null, null, i2.View_BlogPostComponent_0, i2.RenderType_BlogPostComponent)), i1.Éµdid(1, 49152, null, 0, i3.BlogPostComponent, [i4.DOCUMENT], { postTitle: [0, \"postTitle\"], postDate: [1, \"postDate\"], postAbstract: [2, \"postAbstract\"] }, null), (_l()(), i1.Éµeld(2, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Most HTTP API endpoints today are defined using REST architecture. Using Spring Boot 2 controllers in Java, it has become trivial to create an API for servers and for the most part this is all that is needed. But everything has weaknesses and GraphQL provides a solution for one of them.\"])), (_l()(), i1.Éµeld(4, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Consider that you are building a resource server that exposes data to many different clients, which is typical in a microservices architecture for example. The server is in full control over what data is served, but what if each client needs a different subset of that data? A single REST endpoint means that every client is downloading everything while they may need just one specific field. Providing an endpoint for each client will overload the API as well as the backend code. GraphQL solves this by letting the clients decide which fields they want and notify the server so this will be the only data they get. I will show how GraphQL can easily be added to an existing Spring Boot application.\"])), (_l()(), i1.Éµeld(6, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Existing application\"])), (_l()(), i1.Éµeld(8, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Let's start from a basic working Spring Boot application. There are REST controllers which communicate with an embedded MongoDB through repository classes. There are 2 mongo collections which coincide with the following model objects:\"])), (_l()(), i1.Éµeld(10, 0, null, 0, 12, \"div\", [[\"class\", \"row\"]], null, null, null, null, null)), (_l()(), i1.Éµeld(11, 0, null, null, 5, \"div\", [[\"class\", \"col-6\"]], null, null, null, null, null)), (_l()(), i1.Éµeld(12, 0, null, null, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(13, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(14, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(15, 1), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(17, 0, null, null, 5, \"div\", [[\"class\", \"col-6\"]], null, null, null, null, null)), (_l()(), i1.Éµeld(18, 0, null, null, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(19, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(20, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(21, 1), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(23, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"This initial state can be pulled from \"])), (_l()(), i1.Éµeld(25, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/graphql-springboot-angular-example/tree/springboot-server-initial\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"branch 'springboot-server-initial' of my example git repository\"])), (_l()(), i1.Éµted(-1, null, [\". Simply run the Spring Boot application and you can interact with the REST API. I use Postman for the job:\"])), (_l()(), i1.Éµeld(28, 0, null, 0, 2, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(29, 0, null, null, 1, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(30, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"] }, null), (_l()(), i1.Éµeld(31, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Output:\"])), (_l()(), i1.Éµeld(33, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(34, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(35, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(36, 1), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(38, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Setup GraphQL\"])), (_l()(), i1.Éµeld(40, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Adding GraphQL functionalities to a Spring Boot server is very easy. Add the following Maven dependencies:\"])), (_l()(), i1.Éµeld(42, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(43, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(44, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(45, 1), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(47, 0, null, 0, 13, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"which will enable the endpoints \"])), (_l()(), i1.Éµeld(49, 0, null, null, 1, \"code\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"/graphql\"])), (_l()(), i1.Éµted(-1, null, [\" and \"])), (_l()(), i1.Éµeld(52, 0, null, null, 1, \"code\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"/graphiql\"])), (_l()(), i1.Éµted(-1, null, [\". \"])), (_l()(), i1.Éµeld(55, 0, null, null, 1, \"code\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"/graphql\"])), (_l()(), i1.Éµted(-1, null, [\" is the endpoint that clients use to process their queries. \"])), (_l()(), i1.Éµeld(58, 0, null, null, 1, \"code\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"/graphiql\"])), (_l()(), i1.Éµted(-1, null, [\" is a test endpoint that provides a stand-alone user interface for testing queries with.\"])), (_l()(), i1.Éµeld(61, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"The next step is to define GraphQL data resolver classes. These resolver classes define the GraphQL API endpoints that can be queried. In our example we have \"])), (_l()(), i1.Éµeld(63, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"RootQueryResolver\"])), (_l()(), i1.Éµted(-1, null, [\" that defines \"])), (_l()(), i1.Éµeld(66, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"GET\"])), (_l()(), i1.Éµted(-1, null, [\" methods:\"])), (_l()(), i1.Éµeld(69, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(70, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(71, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(72, 1), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(74, 0, null, 0, 19, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"and we have \"])), (_l()(), i1.Éµeld(76, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"PostMutation\"])), (_l()(), i1.Éµted(-1, null, [\" which defines methods that can change the state of our \"])), (_l()(), i1.Éµeld(79, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Post\"])), (_l()(), i1.Éµted(-1, null, [\" model (think \"])), (_l()(), i1.Éµeld(82, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"POST\"])), (_l()(), i1.Éµted(-1, null, [\", \"])), (_l()(), i1.Éµeld(85, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"PUT\"])), (_l()(), i1.Éµted(-1, null, [\", \"])), (_l()(), i1.Éµeld(88, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"DELETE\"])), (_l()(), i1.Éµted(-1, null, [\" methods). This class implements \"])), (_l()(), i1.Éµeld(91, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"GraphQLMutationResolver\"])), (_l()(), i1.Éµted(-1, null, [\" and is defined as follows:\"])), (_l()(), i1.Éµeld(94, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(95, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(96, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(97, 1), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(99, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"The final step is to define a schema that exposes the GraphQL API. The schema in our example will define the two models and the two Resolver classes as available types. Ensure the schema filename has extension \"])), (_l()(), i1.Éµeld(101, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\".graphqls\"])), (_l()(), i1.Éµted(-1, null, [\" and put it under the \"])), (_l()(), i1.Éµeld(104, 0, null, null, 1, \"code\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"/resources\"])), (_l()(), i1.Éµted(-1, null, [\" folder.\"])), (_l()(), i1.Éµeld(107, 0, null, 0, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(108, 0, null, null, 2, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(109, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"] }, null), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(111, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"The exclamation marks in the schema indicate that the field is non-nullable.\"])), (_l()(), i1.Éµeld(113, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"The extended server implementation can be pulled from \"])), (_l()(), i1.Éµeld(115, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/graphql-springboot-angular-example/tree/graphql-server\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"branch 'graphql-server'\"])), (_l()(), i1.Éµted(-1, null, [\". You can now play around with the endpoints.\"])), (_l()(), i1.Éµeld(118, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Using the GraphQL endpoints\"])), (_l()(), i1.Éµeld(120, 0, null, 0, 4, \"h5\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Graph\"])), (_l()(), i1.Éµeld(122, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"i\"])), (_l()(), i1.Éµted(-1, null, [\"QL\"])), (_l()(), i1.Éµeld(125, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Navigate to \"])), (_l()(), i1.Éµeld(127, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"localhost:8080/graphiql\"])), (_l()(), i1.Éµted(-1, null, [\" to open up a user interface. An example query would be:\"])), (_l()(), i1.Éµeld(130, 0, null, 0, 2, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(131, 0, null, null, 1, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(132, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"] }, null), (_l()(), i1.Éµeld(133, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"which has the following output:\"])), (_l()(), i1.Éµeld(135, 0, null, 0, 2, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(136, 0, null, null, 1, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(137, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"] }, null), (_l()(), i1.Éµeld(138, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"The posts are filtered by \"])), (_l()(), i1.Éµeld(140, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"authorId\"])), (_l()(), i1.Éµted(-1, null, [\" and only the requested fields are returned by the server. This can be validated by checking the response in the Network tab of your browser.\"])), (_l()(), i1.Éµeld(143, 0, null, 0, 3, \"h5\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"POST request on \"])), (_l()(), i1.Éµeld(145, 0, null, null, 1, \"code\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"/graphql\"])), (_l()(), i1.Éµeld(147, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"In Postman a POST request is executed on \"])), (_l()(), i1.Éµeld(149, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"localhost:8080/graphql\"])), (_l()(), i1.Éµted(-1, null, [\" with body:\"])), (_l()(), i1.Éµeld(152, 0, null, 0, 2, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(153, 0, null, null, 1, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(154, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"] }, null), (_l()(), i1.Éµeld(155, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"The POST request body is a JSON type that has a single key \\\"query\\\" and as value the full stringified query. The response body will contain the name of every author and the title of their posts:\"])), (_l()(), i1.Éµeld(157, 0, null, 0, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(158, 0, null, null, 2, \"code\", [[\"class\", \"max-codeblock-height\"]], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(159, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(160, 1), (_l()(), i1.Éµeld(161, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"The latest version of Postman provides support for a more visually appealing syntax, similar to Graph\"])), (_l()(), i1.Éµeld(163, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"i\"])), (_l()(), i1.Éµted(-1, null, [\"QL: \"])), (_l()(), i1.Éµeld(166, 0, null, 0, 1, \"div\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(167, 0, null, null, 0, \"img\", [[\"alt\", \"\"], [\"class\", \"img-fluid rounded mb-4\"], [\"src\", \"assets/images/postman_graphql.png\"]], null, null, null, null, null)), (_l()(), i1.Éµeld(168, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Angular client support\"])), (_l()(), i1.Éµeld(170, 0, null, 0, 13, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Angular clients can use \"])), (_l()(), i1.Éµeld(172, 0, null, null, 1, \"a\", [[\"href\", \"https://www.npmjs.com/package/apollo-angular\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Apollo Angular\"])), (_l()(), i1.Éµted(-1, null, [\" to easily send GraphQL queries to the server. Run \"])), (_l()(), i1.Éµeld(175, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"ng add apollo-angular\"])), (_l()(), i1.Éµted(-1, null, [\" and set the URI of the newly created GraphQL module to \"])), (_l()(), i1.Éµeld(178, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"localhost:8080/graphql\"])), (_l()(), i1.Éµted(-1, null, [\". That's it! Inject the \"])), (_l()(), i1.Éµeld(181, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Apollo\"])), (_l()(), i1.Éµted(-1, null, [\" service in the component that needs to send a query and use one of the methods available, for example:\"])), (_l()(), i1.Éµeld(184, 0, null, 0, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(185, 0, null, null, 2, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(186, 540672, null, 0, i5.Highlight, [i1.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(187, 1), (_l()(), i1.Éµeld(188, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"The full implementation can be pulled from \"])), (_l()(), i1.Éµeld(190, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/graphql-springboot-angular-example/tree/graphql-with-client\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"branch 'graphql-with-client'\"])), (_l()(), i1.Éµted(-1, null, [\". \"])), (_l()(), i1.Éµeld(193, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"When to use GraphQL\"])), (_l()(), i1.Éµeld(195, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"As shown in this example, GraphQL can easily be implemented to work alongside with REST API structures. There is no need to pick one over the other. GraphQL is very useful when many clients need to retrieve the same dataset, but need a different subselection of it. This can help reduce network traffic, which is important for web applications.\"])), (_l()(), i1.Éµeld(197, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"For simple queries that return little data, using GraphQL may not be worth it. The client needs to send more data since the server needs to know which fields to return. The server needs to process this extra information which may have an impact on performance. However, since we are talking about small data, this impact on network traffic and serverside processing may be negligible.\"])), (_l()(), i1.Éµeld(199, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"A bigger problem occur if the server output contains a tree with indefinite output. GraphQL can not query in indefinite depth, so the query may have to be split into multiple queries.\"])), (_l()(), i1.Éµeld(201, 0, null, 0, 3, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Another difficult problem occurs when \"])), (_l()(), i1.Éµeld(203, 0, null, null, 1, \"a\", [[\"href\", \"https://labs.getninjas.com.br/pain-points-of-graphql-7e83ba5ddef7#c2f0\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"the client wants to cache the query responses.\"])), (_l()(), i1.Éµeld(205, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"In conclusion, use the right tool for the right problem! GraphQL is a great fit for servers with many different clients and different requirements, such as in a microservices architecture. But keep in mind the current limitations.\"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.postTitle(); var currVal_1 = _co.postDate(); var currVal_2 = _co.postAbstract(); _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2); var currVal_4 = \"public class Author {\\n    private String id;\\n    private String name;\\n    private String thumbnail;\\n    private List<Post> posts;\"; var currVal_5 = _ck(_v, 15, 0, \"jadva\"); _ck(_v, 14, 0, currVal_4, currVal_5); var currVal_7 = \"public class Post {\\n    private String id;\\n    private long timestamp;\\n    private String title;\\n    private String text;\\n    private String category;\\n    private String authorId;\"; var currVal_8 = _ck(_v, 21, 0, \"java\"); _ck(_v, 20, 0, currVal_7, currVal_8); var currVal_10 = \"localhost:8080/posts-by-author?authorId=Alfred\"; _ck(_v, 30, 0, currVal_10); var currVal_12 = \"[\\n    {\\n        \\\"id\\\": \\\"d3ffb489-ac4f-4873-bc99-8c62a59d0939\\\",\\n        \\\"timestamp\\\": 60,\\n        \\\"title\\\": \\\"Example 3\\\",\\n        \\\"text\\\": \\\"some MORE content\\\",\\n        \\\"category\\\": \\\"cat3\\\",\\n        \\\"authorId\\\": \\\"Alfred\\\"\\n    }\\n]\"; var currVal_13 = _ck(_v, 36, 0, \"json\"); _ck(_v, 35, 0, currVal_12, currVal_13); var currVal_15 = \"<dependency>\\n    <groupId>com.graphql-java</groupId>\\n    <artifactId>graphql-spring-boot-starter</artifactId>\\n    <version>5.0.2</version>\\n</dependency>\\n<dependency>\\n    <groupId>com.graphql-java</groupId>\\n    <artifactId>graphql-java-tools</artifactId>\\n    <version>5.2.4</version>\\n</dependency>\\n<dependency>\\n    <groupId>com.graphql-java</groupId>\\n    <artifactId>graphiql-spring-boot-starter</artifactId>\\n    <version>5.0.2</version>\\n</dependency>\"; var currVal_16 = _ck(_v, 45, 0, \"xml\"); _ck(_v, 44, 0, currVal_15, currVal_16); var currVal_18 = \"public class RootQueryResolver implements GraphQLQueryResolver {\\n    private PostRepository postRepository;\\n    private AuthorRepository authorRepository;\\n\\n    public List<Author> getAllAuthors(){ return authorRepository.findAll(); }\\n    public List<Post> getAllPosts(){ return postRepository.findAll(); }\\n    public List<Post> getPosts(String authorId){ return postRepository.getAllByAuthorId(authorId); }\"; var currVal_19 = _ck(_v, 72, 0, \"java\"); _ck(_v, 71, 0, currVal_18, currVal_19); var currVal_21 = \"public class PostMutation implements GraphQLMutationResolver {\\n    private PostRepository postRepository;\\n\\n    public Post writePost(String title, String text, String category, String authorId) {\\n        Post post = new Post();\\n        post.setId(UUID.randomUUID().toString());\\n        post.setTitle(title);\\n        post.setText(text);\\n        post.setCategory(category);\\n        post.setAuthorId(authorId);\\n        postRepository.save(post);\\n        return post;\\n    }\"; var currVal_22 = _ck(_v, 97, 0, \"java\"); _ck(_v, 96, 0, currVal_21, currVal_22); var currVal_24 = \"type Post {\\n    id: ID!\\n    title: String!\\n    text: String!\\n    category: String\\n    authorId: String!\\n}\\n\\ntype Author {\\n    id: ID!\\n    name: String!\\n    thumbnail: String\\n    posts: [Post]!\\n}\\n\\ntype Query {\\n    getAllAuthors: [Author]!\\n    getAllPosts: [Post]!\\n    getPosts(authorId: String): [Post]!\\n}\\n\\ntype Mutation {\\n    writePost(title: String!, text: String!, category: String, authorId: String) : Post!\\n}\"; _ck(_v, 109, 0, currVal_24); var currVal_26 = \"{\\n    getPosts(authorId: \\\"Stephen\\\"){\\n        title\\n    }\\n}\"; _ck(_v, 132, 0, currVal_26); var currVal_28 = \"{\\n  \\\"data\\\": {\\n    \\\"getPosts\\\": [\\n      {\\n        \\\"title\\\": \\\"Example 1\\\"\\n      },\\n      {\\n        \\\"title\\\": \\\"Example 2\\\"\\n      },\\n      {\\n        \\\"title\\\": \\\"Example 5\\\"\\n      }\\n    ]\\n  }\\n}\"; _ck(_v, 137, 0, currVal_28); var currVal_30 = \"{\\n    \\\"query\\\": \\\"{ getAllAuthors{name, posts {title} }}\\\"\\n}\"; _ck(_v, 154, 0, currVal_30); var currVal_32 = \"{\\n    \\\"data\\\": {\\n        \\\"getAllAuthors\\\": [\\n            {\\n                \\\"name\\\": \\\"Stephen\\\",\\n                \\\"posts\\\": [\\n                    {\\n                        \\\"title\\\": \\\"Example 1\\\"\\n                    },\\n                    {\\n                        \\\"title\\\": \\\"Example 2\\\"\\n                    },\\n                    {\\n                        \\\"title\\\": \\\"Example 5\\\"\\n                    }\\n                ]\\n            },\\n            {\\n                \\\"name\\\": \\\"Alfred\\\",\\n                \\\"posts\\\": [\\n                    {\\n                        \\\"title\\\": \\\"Example 3\\\"\\n                    }\\n                ]\\n            },\\n            {\\n                \\\"name\\\": \\\"Bob\\\",\\n                \\\"posts\\\": [\\n                    {\\n                        \\\"title\\\": \\\"Example 4\\\"\\n                    }\\n                ]\\n            }\\n        ]\\n    }\\n}\"; var currVal_33 = _ck(_v, 160, 0, \"json\"); _ck(_v, 159, 0, currVal_32, currVal_33); var currVal_35 = \"this.apollo.watchQuery({\\n    query: gql`\\n      {\\n          getPosts(authorId: \\\"Stephen\\\") {\\n              title\\n          }\\n      }\\n    `\\n}).valueChanges.subscribe(result => {\\n  this.postsData = result.data;\\n});\"; var currVal_36 = _ck(_v, 187, 0, \"typescript\"); _ck(_v, 186, 0, currVal_35, currVal_36); }, function (_ck, _v) { var currVal_3 = true; _ck(_v, 13, 0, currVal_3); var currVal_6 = true; _ck(_v, 19, 0, currVal_6); var currVal_9 = true; _ck(_v, 29, 0, currVal_9); var currVal_11 = true; _ck(_v, 34, 0, currVal_11); var currVal_14 = true; _ck(_v, 43, 0, currVal_14); var currVal_17 = true; _ck(_v, 70, 0, currVal_17); var currVal_20 = true; _ck(_v, 95, 0, currVal_20); var currVal_23 = true; _ck(_v, 108, 0, currVal_23); var currVal_25 = true; _ck(_v, 131, 0, currVal_25); var currVal_27 = true; _ck(_v, 136, 0, currVal_27); var currVal_29 = true; _ck(_v, 153, 0, currVal_29); var currVal_31 = true; _ck(_v, 158, 0, currVal_31); var currVal_34 = true; _ck(_v, 185, 0, currVal_34); }); }\nexport function View_GraphqlComponent_Host_0(_l) { return i1.Éµvid(0, [(_l()(), i1.Éµeld(0, 0, null, null, 1, \"app-graph-ql\", [], null, null, null, View_GraphqlComponent_0, RenderType_GraphqlComponent)), i1.Éµdid(1, 49152, null, 0, i6.GraphqlComponent, [], null, null)], null, null); }\nvar GraphqlComponentNgFactory = i1.Éµccf(\"app-graph-ql\", i6.GraphqlComponent, View_GraphqlComponent_Host_0, {}, {}, []);\nexport { GraphqlComponentNgFactory as GraphqlComponentNgFactory };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\".max-codeblock-height[_ngcontent-%COMP%]{max-height:300px}\"];\nexport { styles as styles };\n","<app-blog-post\r\n    [postTitle]=\"postTitle()\"\r\n    [postDate]=\"postDate()\"\r\n    [postAbstract]=\"postAbstract()\">\r\n\r\n    <p>Most HTTP API endpoints today are defined using REST architecture. Using Spring Boot 2 controllers in Java, it\r\n        has become trivial to create an API for servers and for the most part this is all that is needed. But everything\r\n        has weaknesses and GraphQL provides a solution for one of them.</p>\r\n\r\n    <p>Consider that you are building a resource server that exposes data to many different clients, which is typical in\r\n        a microservices architecture for example. The server is in full control over what data is served, but what if\r\n        each client needs a different subset of that data? A single REST endpoint means that every client is downloading\r\n        everything while they may need just one specific field. Providing an endpoint for each client will overload the\r\n        API as well as the backend code. GraphQL solves this by letting the clients decide which fields they want and\r\n        notify the server so this will be the only data they get. I will show how GraphQL can easily be added to an\r\n        existing Spring Boot application.</p>\r\n\r\n    <h3>Existing application</h3>\r\n\r\n    <p>Let's start from a basic working Spring Boot application. There are REST controllers which communicate with an\r\n        embedded MongoDB through repository classes. There are 2 mongo collections which coincide with the following\r\n        model objects:</p>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-6\">\r\n            <pre><code [languages]=\"['jadva']\" [highlight]=\"\r\n    'public class Author {\r\n    private String id;\r\n    private String name;\r\n    private String thumbnail;\r\n    private List<Post> posts;'\">\r\n    </code></pre>\r\n        </div>\r\n        <div class=\"col-6\">\r\n            <pre><code [languages]=\"['java']\" [highlight]=\"\r\n    'public class Post {\r\n    private String id;\r\n    private long timestamp;\r\n    private String title;\r\n    private String text;\r\n    private String category;\r\n    private String authorId;'\">\r\n    </code></pre>\r\n        </div>\r\n    </div>\r\n\r\n    <p>This initial state can be pulled from <a\r\n        href=\"https://github.com/AlexanderTang/graphql-springboot-angular-example/tree/springboot-server-initial\">branch\r\n        'springboot-server-initial' of my example git repository</a>. Simply run the Spring Boot application and\r\n        you can interact with the REST API. I use Postman for the job:</p>\r\n\r\n    <pre><code [highlight]=\"'localhost:8080/posts-by-author?authorId=Alfred'\"></code></pre>\r\n\r\n    <p>Output:</p>\r\n\r\n    <pre><code [languages]=\"['json']\" [highlight]=\"'[\r\n    {\r\n        &quot;id&quot;: &quot;d3ffb489-ac4f-4873-bc99-8c62a59d0939&quot;,\r\n        &quot;timestamp&quot;: 60,\r\n        &quot;title&quot;: &quot;Example 3&quot;,\r\n        &quot;text&quot;: &quot;some MORE content&quot;,\r\n        &quot;category&quot;: &quot;cat3&quot;,\r\n        &quot;authorId&quot;: &quot;Alfred&quot;\r\n    }\r\n]'\">\r\n    </code></pre>\r\n\r\n    <h3>Setup GraphQL</h3>\r\n\r\n    <p>Adding GraphQL functionalities to a Spring Boot server is very easy. Add the following Maven dependencies:</p>\r\n\r\n    <pre><code [languages]=\"['xml']\" [highlight]=\"'<dependency>\r\n    <groupId>com.graphql-java</groupId>\r\n    <artifactId>graphql-spring-boot-starter</artifactId>\r\n    <version>5.0.2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.graphql-java</groupId>\r\n    <artifactId>graphql-java-tools</artifactId>\r\n    <version>5.2.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.graphql-java</groupId>\r\n    <artifactId>graphiql-spring-boot-starter</artifactId>\r\n    <version>5.0.2</version>\r\n</dependency>'\">\r\n    </code></pre>\r\n\r\n    <p>which will enable the endpoints <code>/graphql</code> and <code>/graphiql</code>. <code>/graphql</code> is the\r\n        endpoint that clients use to process their queries. <code>/graphiql</code> is a test\r\n        endpoint that provides a stand-alone user interface for testing queries with.</p>\r\n\r\n    <p>The next step is to define GraphQL data resolver classes. These resolver classes define the GraphQL API endpoints\r\n        that can be queried. In our example we have <b>RootQueryResolver</b> that defines <i>GET</i>\r\n        methods:</p>\r\n\r\n    <pre><code [languages]=\"['java']\"\r\n               [highlight]=\"'public class RootQueryResolver implements GraphQLQueryResolver {\r\n    private PostRepository postRepository;\r\n    private AuthorRepository authorRepository;\r\n\r\n    public List<Author> getAllAuthors(){ return authorRepository.findAll(); }\r\n    public List<Post> getAllPosts(){ return postRepository.findAll(); }\r\n    public List<Post> getPosts(String authorId){ return postRepository.getAllByAuthorId(authorId); }'\">\r\n    </code></pre>\r\n\r\n    <p>and we have <b>PostMutation</b> which defines methods that can change the state of our\r\n        <b>Post</b> model (think <i>POST</i>, <i>PUT</i>, <i>DELETE</i> methods). This class\r\n        implements <b>GraphQLMutationResolver</b> and is defined as follows:</p>\r\n\r\n    <pre><code [languages]=\"['java']\"\r\n               [highlight]=\"'public class PostMutation implements GraphQLMutationResolver {\r\n    private PostRepository postRepository;\r\n\r\n    public Post writePost(String title, String text, String category, String authorId) {\r\n        Post post = new Post();\r\n        post.setId(UUID.randomUUID().toString());\r\n        post.setTitle(title);\r\n        post.setText(text);\r\n        post.setCategory(category);\r\n        post.setAuthorId(authorId);\r\n        postRepository.save(post);\r\n        return post;\r\n    }'\">\r\n    </code></pre>\r\n\r\n    <p>The final step is to define a schema that exposes the GraphQL API. The schema in our example will define the two\r\n        models and the two Resolver classes as available types. Ensure the schema filename has extension\r\n        <code class=\"github-code\">.graphqls</code> and put it under the <code>/resources</code> folder.</p>\r\n\r\n    <pre><code [highlight]=\"'type Post {\r\n    id: ID!\r\n    title: String!\r\n    text: String!\r\n    category: String\r\n    authorId: String!\r\n}\r\n\r\ntype Author {\r\n    id: ID!\r\n    name: String!\r\n    thumbnail: String\r\n    posts: [Post]!\r\n}\r\n\r\ntype Query {\r\n    getAllAuthors: [Author]!\r\n    getAllPosts: [Post]!\r\n    getPosts(authorId: String): [Post]!\r\n}\r\n\r\ntype Mutation {\r\n    writePost(title: String!, text: String!, category: String, authorId: String) : Post!\r\n}'\">\r\n    </code></pre>\r\n\r\n    <p>The exclamation marks in the schema indicate that the field is non-nullable.</p>\r\n\r\n    <p>The extended server implementation can be pulled from <a\r\n        href=\"https://github.com/AlexanderTang/graphql-springboot-angular-example/tree/graphql-server\">branch\r\n        'graphql-server'</a>. You can now play around with the endpoints.</p>\r\n\r\n    <h3>Using the GraphQL endpoints</h3>\r\n\r\n    <h5>Graph<i>i</i>QL</h5>\r\n\r\n    <p>Navigate to <code class=\"github-code\">localhost:8080/graphiql</code> to open up a user interface. An example\r\n        query would be:</p>\r\n\r\n    <pre><code [highlight]=\"'{\r\n    getPosts(authorId: &quot;Stephen&quot;){\r\n        title\r\n    }\r\n}'\"></code></pre>\r\n\r\n    <p>which has the following output:</p>\r\n\r\n    <pre><code [highlight]=\"'{\r\n  &quot;data&quot;: {\r\n    &quot;getPosts&quot;: [\r\n      {\r\n        &quot;title&quot;: &quot;Example 1&quot;\r\n      },\r\n      {\r\n        &quot;title&quot;: &quot;Example 2&quot;\r\n      },\r\n      {\r\n        &quot;title&quot;: &quot;Example 5&quot;\r\n      }\r\n    ]\r\n  }\r\n}'\"></code></pre>\r\n\r\n    <p>The posts are filtered by <i>authorId</i> and only the requested fields are returned by\r\n        the server. This can be validated by checking the response in the Network tab of your browser.</p>\r\n\r\n    <h5>POST request on <code>/graphql</code></h5>\r\n\r\n    <p>In Postman a POST request is executed on <code class=\"github-code\">localhost:8080/graphql</code> with body:</p>\r\n\r\n    <pre><code [highlight]=\"'{\r\n    &quot;query&quot;: &quot;{ getAllAuthors{name, posts {title} }}&quot;\r\n}'\"></code></pre>\r\n\r\n    <p>The POST request body is a JSON type that has a single key \"query\" and as value the full stringified query. The\r\n        response body will contain the name of every author and the title of their posts:</p>\r\n\r\n    <pre><code class=\"max-codeblock-height\" [languages]=\"['json']\" [highlight]=\"'{\r\n    &quot;data&quot;: {\r\n        &quot;getAllAuthors&quot;: [\r\n            {\r\n                &quot;name&quot;: &quot;Stephen&quot;,\r\n                &quot;posts&quot;: [\r\n                    {\r\n                        &quot;title&quot;: &quot;Example 1&quot;\r\n                    },\r\n                    {\r\n                        &quot;title&quot;: &quot;Example 2&quot;\r\n                    },\r\n                    {\r\n                        &quot;title&quot;: &quot;Example 5&quot;\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                &quot;name&quot;: &quot;Alfred&quot;,\r\n                &quot;posts&quot;: [\r\n                    {\r\n                        &quot;title&quot;: &quot;Example 3&quot;\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                &quot;name&quot;: &quot;Bob&quot;,\r\n                &quot;posts&quot;: [\r\n                    {\r\n                        &quot;title&quot;: &quot;Example 4&quot;\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}'\"></code></pre>\r\n\r\n    <p>The latest version of Postman provides support for a more visually appealing syntax, similar to Graph<i>i</i>QL:\r\n    </p>\r\n\r\n    <div>\r\n        <img class=\"img-fluid rounded mb-4\" src=\"assets/images/postman_graphql.png\" alt=\"\">\r\n    </div>\r\n\r\n    <h3>Angular client support</h3>\r\n\r\n    <p>Angular clients can use <a href=\"https://www.npmjs.com/package/apollo-angular\">Apollo Angular</a> to easily\r\n        send GraphQL queries to the server. Run <code class=\"github-code\">ng add apollo-angular</code> and set the URI\r\n        of the newly created GraphQL module to <code class=\"github-code\">localhost:8080/graphql</code>. That's it!\r\n        Inject the <b>Apollo</b> service in the component that needs to send a query and use\r\n        one of the methods available, for example:</p>\r\n\r\n    <pre><code [languages]=\"['typescript']\" [highlight]=\"'this.apollo.watchQuery({\r\n    query: gql`\r\n      {\r\n          getPosts(authorId: &quot;Stephen&quot;) {\r\n              title\r\n          }\r\n      }\r\n    `\r\n}).valueChanges.subscribe(result => {\r\n  this.postsData = result.data;\r\n});'\"></code></pre>\r\n\r\n    <p>The full implementation can be pulled from <a\r\n        href=\"https://github.com/AlexanderTang/graphql-springboot-angular-example/tree/graphql-with-client\">branch\r\n        'graphql-with-client'</a>.\r\n\r\n    <h3>When to use GraphQL</h3>\r\n\r\n    <p>As shown in this example, GraphQL can easily be implemented to work alongside with REST API structures. There is\r\n        no need to pick one over the other. GraphQL is very useful when many clients need to retrieve the same dataset,\r\n        but need a different subselection of it. This can help reduce network traffic, which is important for web\r\n        applications.</p>\r\n\r\n    <p>For simple queries that return little data, using GraphQL may not be worth it. The client needs to send more data\r\n        since the server needs to know which fields to return. The server needs to process this extra information\r\n        which may have an impact on performance. However, since we are talking about small data, this impact on network\r\n        traffic and serverside processing may be negligible.</p>\r\n\r\n    <p>A bigger problem occur if the server output contains a tree with indefinite output. GraphQL can not query in\r\n        indefinite depth, so the query may have to be split into multiple queries.</p>\r\n\r\n    <p>Another difficult problem occurs when <a\r\n        href=\"https://labs.getninjas.com.br/pain-points-of-graphql-7e83ba5ddef7#c2f0\">the client wants to cache\r\n        the query responses.</a></p>\r\n\r\n    <p>In conclusion, use the right tool for the right problem! GraphQL is a great fit for servers with many different\r\n        clients and different requirements, such as in a microservices architecture. But keep in mind the\r\n        current limitations.</p>\r\n\r\n</app-blog-post>\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../../shared/blog-post/blog-post.component.ngfactory\";\nimport * as i2 from \"../../../../../shared/blog-post/blog-post.component\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ngx-highlightjs\";\nimport * as i5 from \"./rs-hs.component\";\nvar styles_RsHsComponent = [];\nvar RenderType_RsHsComponent = i0.Éµcrt({ encapsulation: 2, styles: styles_RsHsComponent, data: {} });\nexport { RenderType_RsHsComponent as RenderType_RsHsComponent };\nexport function View_RsHsComponent_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 86, \"app-blog-post\", [], null, null, null, i1.View_BlogPostComponent_0, i1.RenderType_BlogPostComponent)), i0.Éµdid(1, 49152, null, 0, i2.BlogPostComponent, [i3.DOCUMENT], { postTitle: [0, \"postTitle\"], postDate: [1, \"postDate\"], postAbstract: [2, \"postAbstract\"] }, null), (_l()(), i0.Éµeld(2, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"RSA and HMAC are cryptographic algorithms that can scramble data into something indecipherable. This article will highlight how they work, what their differences are and some use cases in which to use them without delving into the mathematical aspects.\"])), (_l()(), i0.Éµeld(4, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"RSA\"])), (_l()(), i0.Éµeld(6, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"RSA is an asymmetric algorithm that uses a public and private key pair. As the names suggest, the private key is kept secret from most parties while the public key is public for everyone to use. The following shows an example with RS512, generated \"])), (_l()(), i0.Éµeld(8, 0, null, null, 1, \"a\", [[\"href\", \"https://travistidwell.com/jsencrypt/demo/\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"online\"])), (_l()(), i0.Éµted(-1, null, [\":\"])), (_l()(), i0.Éµeld(11, 0, null, 0, 10, \"div\", [[\"class\", \"row\"]], null, null, null, null, null)), (_l()(), i0.Éµeld(12, 0, null, null, 4, \"div\", [[\"class\", \"col-8\"]], null, null, null, null, null)), (_l()(), i0.Éµeld(13, 0, null, null, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(14, 0, null, null, 2, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(15, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"] }, null), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(17, 0, null, null, 4, \"div\", [[\"class\", \"col-4\"]], null, null, null, null, null)), (_l()(), i0.Éµeld(18, 0, null, null, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(19, 0, null, null, 2, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(20, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"] }, null), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(22, 0, null, 0, 2, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(23, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"I strongly advise against using online tools to generate public/private keys for use in production!\"])), (_l()(), i0.Éµeld(25, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The public key can be used to encrypt a message which the private key can decrypt. The inverse also works: private key for encryption and public key for decryption! This is confusing for some because RSA is an asymmetric algorithm, but the meaning of an asymmetric algorithm is interpreted the wrong way. RSA is asymmetric because different keys are used for encryption and decryption, as opposed to symmetric algorithms where the same key is used. The bidirectional encryption/decryption allows RSA to be used in different scenarios. Let's see:\"])), (_l()(), i0.Éµeld(27, 0, null, 0, 1, \"h5\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Encryption\"])), (_l()(), i0.Éµeld(29, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"RSA can be used for encryption of data. Take for example a server which clients can make requests to. Anyone can communicate with the server, but the messages may contain sensitive data such as passwords. Man-in-the-middle-attacks may intercept ongoing network traffic, so the data should be indecipherable by everyone except the intended recipient which is the server. The server can generate a public/private key pair to solve this problem.\"])), (_l()(), i0.Éµeld(31, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The public key gets distributed to anyone accessing the server. Visitors encrypt their data with the public key and send it to the server. The server uses the private key to decrypt the message and access the contents. Even if a third party managed to intercept the message over the network, it is useless without the private key to restore the original data.\"])), (_l()(), i0.Éµeld(33, 0, null, 0, 5, \"figure\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(34, 0, null, null, 0, \"img\", [[\"alt\", \"\"], [\"class\", \"img-fluid rounded width--7\"], [\"src\", \"assets/images/rsa_public_private_key.png\"]], null, null, null, null, null)), (_l()(), i0.Éµeld(35, 0, null, null, 3, \"figcaption\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Public/private key encryption \"])), (_l()(), i0.Éµeld(37, 0, null, null, 1, \"small\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"- source: twilio.com\"])), (_l()(), i0.Éµeld(39, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Using another example, say two people wish to communicate with each other using encrypted messages. Both parties can generate their own public/private key pairs and exchange public keys. This achieves the same situation as the server/client example, except this time they are both the sender and receiver of messages. Person A uses the public key of person B to encrypt data and send them to person B. Person B uses his own private key to decrypt the message sent by person A. In this transaction only the public/private key pair of person B is involved. The same reasoning holds when person B becomes the sender, by using person A's public/private key pair.\"])), (_l()(), i0.Éµeld(41, 0, null, 0, 1, \"h5\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Authenticity validation\"])), (_l()(), i0.Éµeld(43, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"RSA is not only useful for encryption, but it can also be used for validating the authenticity of a message. The intent is very different from the encryption of data in the previous examples. In this case everyone is authorized to view the message contents, but they are not allowed to \"])), (_l()(), i0.Éµeld(45, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"modify\"])), (_l()(), i0.Éµted(-1, null, [\" it.\"])), (_l()(), i0.Éµeld(48, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The private key is this time known only by the sender instead of the receiver, so the public/private key pair needs to be generated by the sender. The public key is again openly available to everyone else. The sender encrypts the message with the private key and attaches it to the original plain text message as a \"])), (_l()(), i0.Éµeld(50, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"signature\"])), (_l()(), i0.Éµted(-1, null, [\". Using the generated public/private key pair above, it will look something like this:\"])), (_l()(), i0.Éµeld(53, 0, null, 0, 5, \"figure\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(54, 0, null, null, 0, \"img\", [[\"alt\", \"\"], [\"class\", \"img-fluid rounded width--8\"], [\"src\", \"assets/images/rsa_signature.png\"]], null, null, null, null, null)), (_l()(), i0.Éµeld(55, 0, null, null, 3, \"figcaption\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Signature example using \"])), (_l()(), i0.Éµeld(57, 0, null, null, 1, \"a\", [[\"href\", \"https://8gwifi.org/RSAFunctionality?rsasignverifyfunctions=rsasignverifyfunctions&keysize=512\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"online tool\"])), (_l()(), i0.Éµeld(59, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Any modification made to the message will invalidate the accompanying signature. With the public key the invalid signature can be detected and the message deemed compromised.\"])), (_l()(), i0.Éµeld(61, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"HMAC\"])), (_l()(), i0.Éµeld(63, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"HMAC is more simplistic in nature. There is just one (secret) key which is used to create a hash from a message, but there is no way to decrypt the hashed output to its original form. This makes HMAC unsuitable for the encryption of data. It is mainly used for authenticity validation by generating a hash from a message, which becomes the signature similar to RSA. The receiver of the message uses the \"])), (_l()(), i0.Éµeld(65, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"same\"])), (_l()(), i0.Éµted(-1, null, [\" key to generate a hash from the message contents and compares it with the accompanying signature. The authenticity of the message is preserved when the hash matches the signature.\"])), (_l()(), i0.Éµeld(68, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Since the receiver needs the key to validate the signature, special care must be taken to ensure it does not fall in the hands of any third parties. If the key gets stolen then the attacker can modify the message contents and use the key to generate a new and \"])), (_l()(), i0.Éµeld(70, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"valid\"])), (_l()(), i0.Éµted(-1, null, [\" signature.\"])), (_l()(), i0.Éµeld(73, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Comparison RSA and HMAC\"])), (_l()(), i0.Éµeld(75, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"One may believe that RSA is the clear winner since it has more applicable use cases and has less opportunity for secret keys to get stolen. HMAC does have the advantage of having smaller token sizes and requires less computational time to validate signatures which translates to better performance. If you are in full control over both the server and the client applications, the risk of secret keys getting stolen will probably be mitigated. If this is the case and performance is a big factor, HMAC is a good candidate. In most other cases I would favor RSA.\"])), (_l()(), i0.Éµeld(77, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Example implementations of RSA/HMAC are RS256 and HS256, which make use of SHA-256. For longer keys, use implementations with SHA-384 or SHA-512.\"])), (_l()(), i0.Éµeld(79, 0, null, 0, 2, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(80, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Further reading\"])), (_l()(), i0.Éµeld(82, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"This post focused on a high level explanation on purpose, leaving out the mathematical reasoning to better men. If you are left wondering how the public/private key pairs works, I recommend \"])), (_l()(), i0.Éµeld(84, 0, null, null, 1, \"a\", [[\"href\", \"https://www.comparitech.com/blog/information-security/rsa-encryption/\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"this post\"])), (_l()(), i0.Éµted(-1, null, [\".\"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.postTitle(); var currVal_1 = _co.postDate(); var currVal_2 = _co.postAbstract(); _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2); var currVal_4 = \"-----BEGIN RSA PRIVATE KEY-----\\nMIIBOwIBAAJBAJTiKVtSDSrTAdYhHEA/1rEzJ4RQHEEdcPeZdmZSSHborXbEy4c5\\n7g+k/b/c67KGDTfSoCj8T3L9OpnZd+SxTocCAwEAAQJAA2A1a9qqbcQnEIHjsBlC\\ndvYf+UIPwfI284ZJRvyqo/eNsjjMzuBbyD5GHwUxXSjvDb1Hrr8W+fGw8+6x9nWq\\nMQIhAOOMkZbBnDAZAL61Er5faOzPU0Lsa7mlMDYjJKy9QZylAiEAp3+mG6zzxA/I\\ntKetg2azqGOdyLs5znn13T/7yevkursCIQCckrHvISO+uMWZc/EEy5PgNryc9R8e\\n67pj1gS7U7Kc/QIgKOMyK0NW5h9sQR1Fb/QcGxjmJV/+xnZjHDVIQ4w/840CIQC+\\n88uVWV4dU3dsdcaoHaO08ZDKHETSZXifFTs4gJ0+JA==\\n-----END RSA PRIVATE KEY-----\"; _ck(_v, 15, 0, currVal_4); var currVal_6 = \"-----BEGIN PUBLIC KEY-----\\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJTiKVtSDSrTAdYhHEA/1rEzJ4RQHEEd\\ncPeZdmZSSHborXbEy4c57g+k/b/c67KGDTfSoCj8T3L9OpnZd+SxTocCAwEAAQ==\\n-----END PUBLIC KEY-----\"; _ck(_v, 20, 0, currVal_6); }, function (_ck, _v) { var currVal_3 = true; _ck(_v, 14, 0, currVal_3); var currVal_5 = true; _ck(_v, 19, 0, currVal_5); }); }\nexport function View_RsHsComponent_Host_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 1, \"app-rs-hs\", [], null, null, null, View_RsHsComponent_0, RenderType_RsHsComponent)), i0.Éµdid(1, 49152, null, 0, i5.RsHsComponent, [], null, null)], null, null); }\nvar RsHsComponentNgFactory = i0.Éµccf(\"app-rs-hs\", i5.RsHsComponent, View_RsHsComponent_Host_0, {}, {}, []);\nexport { RsHsComponentNgFactory as RsHsComponentNgFactory };\n","<app-blog-post\r\n    [postTitle]=\"postTitle()\"\r\n    [postDate]=\"postDate()\"\r\n    [postAbstract]=\"postAbstract()\">\r\n\r\n    <p>RSA and HMAC are cryptographic algorithms that can scramble data into something indecipherable. This article\r\n        will highlight how they work, what their differences are and some use cases in which to use them without\r\n        delving into the mathematical aspects.</p>\r\n\r\n    <h3>RSA</h3>\r\n\r\n    <p>RSA is an asymmetric algorithm that uses a public and private\r\n        key pair. As the names suggest, the private key is kept secret from most parties while the public key is public\r\n        for everyone to use. The following shows an example with RS512, generated <a\r\n            href=\"https://travistidwell.com/jsencrypt/demo/\">online</a>:</p>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-8\">\r\n            <pre><code [highlight]=\"\r\n    '-----BEGIN RSA PRIVATE KEY-----\r\nMIIBOwIBAAJBAJTiKVtSDSrTAdYhHEA/1rEzJ4RQHEEdcPeZdmZSSHborXbEy4c5\r\n7g+k/b/c67KGDTfSoCj8T3L9OpnZd+SxTocCAwEAAQJAA2A1a9qqbcQnEIHjsBlC\r\ndvYf+UIPwfI284ZJRvyqo/eNsjjMzuBbyD5GHwUxXSjvDb1Hrr8W+fGw8+6x9nWq\r\nMQIhAOOMkZbBnDAZAL61Er5faOzPU0Lsa7mlMDYjJKy9QZylAiEAp3+mG6zzxA/I\r\ntKetg2azqGOdyLs5znn13T/7yevkursCIQCckrHvISO+uMWZc/EEy5PgNryc9R8e\r\n67pj1gS7U7Kc/QIgKOMyK0NW5h9sQR1Fb/QcGxjmJV/+xnZjHDVIQ4w/840CIQC+\r\n88uVWV4dU3dsdcaoHaO08ZDKHETSZXifFTs4gJ0+JA==\r\n-----END RSA PRIVATE KEY-----'\">\r\n    </code></pre>\r\n        </div>\r\n        <div class=\"col-4\">\r\n            <pre><code [highlight]=\"\r\n    '-----BEGIN PUBLIC KEY-----\r\nMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJTiKVtSDSrTAdYhHEA/1rEzJ4RQHEEd\r\ncPeZdmZSSHborXbEy4c57g+k/b/c67KGDTfSoCj8T3L9OpnZd+SxTocCAwEAAQ==\r\n-----END PUBLIC KEY-----'\">\r\n    </code></pre>\r\n        </div>\r\n    </div>\r\n\r\n    <p><i>I strongly advise against using online tools to generate public/private keys for use in production!</i></p>\r\n\r\n    <p>The public key can be used to encrypt a message which the private key can decrypt. The inverse also works:\r\n        private key for encryption and public key for decryption! This is confusing for some because RSA is an\r\n        asymmetric algorithm, but the meaning of an asymmetric algorithm is interpreted the wrong way. RSA is asymmetric\r\n        because different keys are used for encryption and decryption, as\r\n        opposed to symmetric algorithms where the same key is used. The bidirectional encryption/decryption allows RSA\r\n        to be used in different scenarios. Let's see:</p>\r\n\r\n    <h5>Encryption</h5>\r\n\r\n    <p>RSA can be used for encryption of data. Take for example a server which clients can make requests to. Anyone can\r\n        communicate with the server, but the messages may contain sensitive data such as passwords.\r\n        Man-in-the-middle-attacks may intercept ongoing network traffic, so the data should be indecipherable by\r\n        everyone except the intended recipient which is the server. The server can generate a\r\n        public/private key pair to solve this problem.</p>\r\n\r\n    <p>The public key gets distributed to anyone accessing the server. Visitors encrypt their data with the\r\n        public key and send it to the server. The server uses the private key to decrypt the message and access the\r\n        contents. Even if a third party managed to intercept the message over the network, it is useless\r\n        without the private key to restore the original data.</p>\r\n\r\n    <figure>\r\n        <img class=\"img-fluid rounded width--7\" src=\"assets/images/rsa_public_private_key.png\" alt=\"\">\r\n        <figcaption>Public/private key encryption\r\n            <small>- source: twilio.com</small>\r\n        </figcaption>\r\n    </figure>\r\n\r\n    <p>Using another example, say two people wish to communicate with each other using encrypted messages. Both parties\r\n        can generate their own public/private key pairs and exchange\r\n        public keys. This achieves the same situation as the server/client example, except this time they are both\r\n        the sender and receiver of messages. Person A uses the public key of person B to encrypt data and send them\r\n        to person B. Person B uses his own private key to decrypt the message sent by person A. In this transaction\r\n        only the public/private key pair of person B is involved. The same reasoning holds when person B becomes the\r\n        sender, by using person A's public/private key pair.</p>\r\n\r\n    <h5>Authenticity validation</h5>\r\n\r\n    <p>RSA is not only useful for encryption, but it can also be used for validating the authenticity of a message.\r\n        The intent is very different from the encryption of data in the previous examples. In this case everyone is\r\n        authorized to view the message contents, but they are not allowed to <i>modify</i> it.</p>\r\n\r\n    <p>The private key is this time known only by the sender instead of the receiver, so the public/private key pair\r\n        needs to be generated by the sender. The public key is again openly available to everyone else. The sender\r\n        encrypts the message with the private key and attaches it to the original plain text message as a\r\n        <i>signature</i>. Using the generated public/private key pair above, it will look something like this:</p>\r\n\r\n    <figure>\r\n        <img class=\"img-fluid rounded width--8\" src=\"assets/images/rsa_signature.png\" alt=\"\">\r\n        <figcaption>Signature example using <a\r\n            href=\"https://8gwifi.org/RSAFunctionality?rsasignverifyfunctions=rsasignverifyfunctions&keysize=512\">online\r\n            tool</a>\r\n        </figcaption>\r\n    </figure>\r\n\r\n    <p>Any modification made to the message will invalidate the accompanying signature. With the public key the\r\n        invalid signature can be detected and the message deemed compromised.</p>\r\n\r\n    <h3>HMAC</h3>\r\n\r\n    <p>HMAC is more simplistic in nature. There is just one (secret) key which is used to create a hash from a message,\r\n        but there is no way to decrypt the hashed output to its original form. This makes HMAC unsuitable for the\r\n        encryption of data. It is mainly used for authenticity validation by generating a hash from a message, which\r\n        becomes the signature similar to RSA. The receiver of the message uses the <i>same</i> key to generate a\r\n        hash from the message contents and compares it with the accompanying signature. The authenticity of the message\r\n        is preserved when the hash matches the signature.</p>\r\n\r\n    <p>Since the receiver needs the key to validate the signature, special care must be taken to ensure it does not\r\n        fall in the hands of any third parties. If the key gets stolen then the attacker can modify the message\r\n        contents and use the key to generate a new and <b>valid</b> signature.</p>\r\n\r\n    <h3>Comparison RSA and HMAC</h3>\r\n\r\n    <p>One may believe that RSA is the clear winner since it has more applicable use cases and has less opportunity for\r\n        secret keys to get stolen. HMAC does have the advantage of having smaller token sizes and requires less\r\n        computational time to validate signatures which translates to better performance. If you are in full control\r\n        over both the server and the client applications, the risk of secret keys getting stolen will probably be\r\n        mitigated. If this is the case and performance is a big factor, HMAC is a good candidate. In most other\r\n        cases I would favor RSA.</p>\r\n\r\n    <p>Example implementations of RSA/HMAC are RS256 and HS256, which make use of SHA-256. For longer keys, use\r\n        implementations with SHA-384 or SHA-512.</p>\r\n\r\n\r\n    <h3><i>Further reading</i></h3>\r\n\r\n    <p>This post focused on a high level explanation on purpose, leaving out the mathematical reasoning to better men.\r\n        If you are left wondering how the public/private key pairs works, I recommend\r\n        <a href=\"https://www.comparitech.com/blog/information-security/rsa-encryption/\">this post</a>.</p>\r\n</app-blog-post>\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./ng-plh.component.scss.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"../../../../../shared/blog-post/blog-post.component.ngfactory\";\nimport * as i3 from \"../../../../../shared/blog-post/blog-post.component\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"ngx-highlightjs\";\nimport * as i7 from \"./ng-plh.component\";\nvar styles_NgPlhComponent = [i0.styles];\nvar RenderType_NgPlhComponent = i1.Éµcrt({ encapsulation: 0, styles: styles_NgPlhComponent, data: {} });\nexport { RenderType_NgPlhComponent as RenderType_NgPlhComponent };\nexport function View_NgPlhComponent_0(_l) { return i1.Éµvid(0, [(_l()(), i1.Éµeld(0, 0, null, null, 89, \"app-blog-post\", [], null, null, null, i2.View_BlogPostComponent_0, i2.RenderType_BlogPostComponent)), i1.Éµdid(1, 49152, null, 0, i3.BlogPostComponent, [i4.DOCUMENT], { postTitle: [0, \"postTitle\"], postDate: [1, \"postDate\"], postAbstract: [2, \"postAbstract\"] }, null), (_l()(), i1.Éµeld(2, 0, null, 0, 5, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"I was writing another post earlier about \"])), (_l()(), i1.Éµeld(4, 0, null, null, 2, \"a\", [[\"routerLink\", \"/blogs/cn-study/de-particles\"]], [[1, \"target\", 0], [8, \"href\", 4]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i1.Éµnov(_v, 5).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i1.Éµdid(5, 671744, null, 0, i5.RouterLinkWithHref, [i5.Router, i5.ActivatedRoute, i4.LocationStrategy], { routerLink: [0, \"routerLink\"] }, null), (_l()(), i1.Éµted(-1, null, [\"the differences between 'de' particles in Chinese\"])), (_l()(), i1.Éµted(-1, null, [\", when the need arose to format Chinese characters and their pinyin (alphabetical system based on Chinese pronunciation) in a nice manner. As someone who would never go back to Word Document after having experienced LateX, I expect my writing time to be devoted to content and not layout (re)formatting. Ideally I just write my Chinese characters and pinyin and some framework will format them together in a way that is visually pleasing for me.\"])), (_l()(), i1.Éµeld(8, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"I searched for a npm package that would suit my needs but I was surprised not to be able to find one. Either my Google search skills were failing me or there simply was no solution available at this time. Or perhaps it was available in Chinese, but my Chinese reading skills are not nearly advanced enough to find it. So I tried searching inspiration from other websites that incorporate this and what I find looks like this:\"])), (_l()(), i1.Éµeld(10, 0, null, 0, 4, \"div\", [[\"class\", \"row\"]], null, null, null, null, null)), (_l()(), i1.Éµeld(11, 0, null, null, 1, \"div\", [[\"class\", \"col-4\"]], null, null, null, null, null)), (_l()(), i1.Éµeld(12, 0, null, null, 0, \"img\", [[\"alt\", \"\"], [\"class\", \"img-fluid rounded\"], [\"src\", \"assets/images/chinese_formatting_website1.png\"]], null, null, null, null, null)), (_l()(), i1.Éµeld(13, 0, null, null, 1, \"div\", [[\"class\", \"col-6\"]], null, null, null, null, null)), (_l()(), i1.Éµeld(14, 0, null, null, 0, \"img\", [[\"alt\", \"\"], [\"class\", \"img-fluid rounded\"], [\"src\", \"assets/images/chinese_formatting_website2.png\"]], null, null, null, null, null)), (_l()(), i1.Éµeld(15, 0, null, 0, 0, \"br\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(16, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"I don't like the look of this too much. The pinyin is decoupled from the characters typically when the pinyin has a long sequence of characters. I find it more visually appealing with the pinyin attached to its character. The \"])), (_l()(), i1.Éµeld(18, 0, null, null, 1, \"a\", [[\"href\", \"https://w3c.github.io/i18n-drafts/articles/ruby/markup.en\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"Ruby Markup\"])), (_l()(), i1.Éµted(-1, null, [\" provides something close to what I am looking for:\"])), (_l()(), i1.Éµeld(21, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(22, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(23, 540672, null, 0, i6.Highlight, [i1.ElementRef, i6.HighlightJS, [2, i6.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(24, 1), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(26, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"will look like this:\"])), (_l()(), i1.Éµeld(28, 0, null, 0, 17, \"p\", [[\"class\", \"chinese-font-size\"]], null, null, null, null, null)), (_l()(), i1.Éµeld(29, 0, null, null, 16, \"ruby\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(30, 0, null, null, 1, \"rb\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"\\u6211\"])), (_l()(), i1.Éµeld(32, 0, null, null, 1, \"rt\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"w\\u01D2\"])), (_l()(), i1.Éµeld(34, 0, null, null, 1, \"rb\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"\\u7684\"])), (_l()(), i1.Éµeld(36, 0, null, null, 1, \"rt\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"d\\u0113\"])), (_l()(), i1.Éµeld(38, 0, null, null, 1, \"rb\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"\\u540D\"])), (_l()(), i1.Éµeld(40, 0, null, null, 1, \"rt\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"m\\u00EDng\"])), (_l()(), i1.Éµeld(42, 0, null, null, 1, \"rb\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"\\u5B57\"])), (_l()(), i1.Éµeld(44, 0, null, null, 1, \"rt\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"z\\u00EC\"])), (_l()(), i1.Éµeld(46, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"But writing whole sentences like this is going to get frustrating fast and hard to maintain. The Ruby Markup language offers some short notations that allow the \"])), (_l()(), i1.Éµeld(48, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"rb\"])), (_l()(), i1.Éµted(-1, null, [\" tags to be removed for example, which is a step in the right direction. The following is equivalent to the above example:\"])), (_l()(), i1.Éµeld(51, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(52, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(53, 540672, null, 0, i6.Highlight, [i1.ElementRef, i6.HighlightJS, [2, i6.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(54, 1), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(56, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"I want to be able to copy paste or write whole sentences and add the pinyin separately without them intertwining like this. Since no such library seemed to exist, I set out to make my own. I have the most experience with Angular and my frontend is often built with Angular, so I created an Angular module. The html template will make use of Ruby Markup.\"])), (_l()(), i1.Éµeld(58, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"The project starts out simple enough. I accept an input that accepts Chinese characters, an input for the corresponding pinyin and loop over both inputs to match them:\"])), (_l()(), i1.Éµeld(60, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(61, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(62, 540672, null, 0, i6.Highlight, [i1.ElementRef, i6.HighlightJS, [2, i6.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(63, 1), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(65, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"which will have the same output as above again. The pinyin is split by empty spaces. Add some fault tolerance to allow for more or less pinyin to be defined than the amount of Chinese characters and we have a first viable prototype. I found interesting npm packages including \"])), (_l()(), i1.Éµeld(67, 0, null, null, 1, \"a\", [[\"href\", \"https://www.npmjs.com/package/chinese-to-pinyin\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"chinese-to-pinyin\"])), (_l()(), i1.Éµted(-1, null, [\" which translates a set of Chinese characters to their pinyin. I incorporated this package into my own to allow for automatic pinyin generation! We can now write:\"])), (_l()(), i1.Éµeld(70, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i1.Éµeld(71, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i1.Éµdid(72, 540672, null, 0, i6.Highlight, [i1.ElementRef, i6.HighlightJS, [2, i6.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i1.Éµpad(73, 1), (_l()(), i1.Éµted(-1, null, [\"\\n    \"])), (_l()(), i1.Éµeld(75, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"and it will still return the same output! This is much closer to what I had in mind originally. If the generated pinyin is not correct it can still be overridden manually with the \"])), (_l()(), i1.Éµeld(77, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"pinyin\"])), (_l()(), i1.Éµted(-1, null, [\" input variable. There are more features available: pinyin in tone number format, pinyin skipping, pinyin for alphabetical letters and css styling. See more details about the features and/or download \"])), (_l()(), i1.Éµeld(80, 0, null, null, 1, \"a\", [[\"href\", \"https://www.npmjs.com/package/ng-piao-liang-hanzi\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"the package at npm\"])), (_l()(), i1.Éµted(-1, null, [\".\"])), (_l()(), i1.Éµeld(83, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"The code is available \"])), (_l()(), i1.Éµeld(85, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/PiaoLiangHanzi\"]], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"in my repository on github\"])), (_l()(), i1.Éµted(-1, null, [\". Feel free to log issues, feature requests or even add pull requests.\"])), (_l()(), i1.Éµeld(88, 0, null, 0, 1, \"small\", [], null, null, null, null, null)), (_l()(), i1.Éµted(-1, null, [\"It managed to get 77 downloads within 17 hours of release! I am pleasantly surprised considering this is my first npm package. \"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.postTitle(); var currVal_1 = _co.postDate(); var currVal_2 = _co.postAbstract(); _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2); var currVal_5 = \"/blogs/cn-study/de-particles\"; _ck(_v, 5, 0, currVal_5); var currVal_7 = \"<ruby><rb>\\u6211</rb><rt>w\\u01D2</rt> <rb>\\u7684</rb><rt>d\\u0113</rt> <rb>\\u540D</rb><rt>m\\u00EDng</rt> <rb>\\u5B57</rb><rt>z\\u00EC</rt></ruby>\"; var currVal_8 = _ck(_v, 24, 0, \"xml\"); _ck(_v, 23, 0, currVal_7, currVal_8); var currVal_10 = \"<ruby>\\u6211<rt>w\\u01D2</rt>\\u7684<rt>d\\u0113</rt>\\u540D<rt>m\\u00EDng</rt>\\u5B57<rt>z\\u00EC</rt></ruby>\"; var currVal_11 = _ck(_v, 54, 0, \"xml\"); _ck(_v, 53, 0, currVal_10, currVal_11); var currVal_13 = \"<ng-piao-liang-hanzi [chineseCharacters]=\\\"'\\u6211\\u7684\\u540D\\u5B57'\\\" [pinyin]=\\\"'w\\u01D2 d\\u0113 m\\u00EDng z\\u00EC'\\\"></ng-piao-liang-hanzi>\"; var currVal_14 = _ck(_v, 63, 0, \"xml\"); _ck(_v, 62, 0, currVal_13, currVal_14); var currVal_16 = \"<ng-piao-liang-hanzi [chineseCharacters]=\\\"'\\u6211\\u7684\\u540D\\u5B57'\\\"></ng-piao-liang-hanzi>\"; var currVal_17 = _ck(_v, 73, 0, \"xml\"); _ck(_v, 72, 0, currVal_16, currVal_17); }, function (_ck, _v) { var currVal_3 = i1.Éµnov(_v, 5).target; var currVal_4 = i1.Éµnov(_v, 5).href; _ck(_v, 4, 0, currVal_3, currVal_4); var currVal_6 = true; _ck(_v, 22, 0, currVal_6); var currVal_9 = true; _ck(_v, 52, 0, currVal_9); var currVal_12 = true; _ck(_v, 61, 0, currVal_12); var currVal_15 = true; _ck(_v, 71, 0, currVal_15); }); }\nexport function View_NgPlhComponent_Host_0(_l) { return i1.Éµvid(0, [(_l()(), i1.Éµeld(0, 0, null, null, 1, \"app-ng-plh\", [], null, null, null, View_NgPlhComponent_0, RenderType_NgPlhComponent)), i1.Éµdid(1, 49152, null, 0, i7.NgPlhComponent, [], null, null)], null, null); }\nvar NgPlhComponentNgFactory = i1.Éµccf(\"app-ng-plh\", i7.NgPlhComponent, View_NgPlhComponent_Host_0, {}, {}, []);\nexport { NgPlhComponentNgFactory as NgPlhComponentNgFactory };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\".chinese-font-size[_ngcontent-%COMP%]{font-size:22px}\"];\nexport { styles as styles };\n","<app-blog-post\r\n    [postTitle]=\"postTitle()\"\r\n    [postDate]=\"postDate()\"\r\n    [postAbstract]=\"postAbstract()\">\r\n\r\n    <p>I was writing another post earlier about <a routerLink=\"/blogs/cn-study/de-particles\">the differences between\r\n        'de' particles in Chinese</a>, when the need arose to format Chinese characters and their pinyin (alphabetical\r\n        system based on Chinese pronunciation) in a nice manner. As someone who would never go back to Word Document\r\n        after having experienced LateX, I expect my writing time to be devoted to content and not layout (re)formatting.\r\n        Ideally I just write my Chinese characters and pinyin and some framework will format them together in a way that\r\n        is visually pleasing for me.</p>\r\n\r\n    <p>I searched for a npm package that would suit my needs but I was surprised not to be able to find one.\r\n        Either my Google search skills were failing me or there simply was no solution available at this time. Or\r\n        perhaps it was available in Chinese, but my Chinese reading skills are not nearly advanced enough to find it. So\r\n        I tried searching inspiration from other websites that incorporate this and what I find looks like this:</p>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-4\">\r\n            <img class=\"img-fluid rounded\" src=\"assets/images/chinese_formatting_website1.png\" alt=\"\">\r\n        </div>\r\n        <div class=\"col-6\">\r\n            <img class=\"img-fluid rounded\" src=\"assets/images/chinese_formatting_website2.png\" alt=\"\">\r\n        </div>\r\n    </div>\r\n    <br>\r\n\r\n    <p>I don't like the look of this too much. The pinyin is decoupled from the characters typically when the pinyin has\r\n        a long sequence of characters. I find it more visually appealing with the pinyin attached to its character. The\r\n        <a href=\"https://w3c.github.io/i18n-drafts/articles/ruby/markup.en\">Ruby Markup</a> provides something close to\r\n        what I am looking for:</p>\r\n\r\n    <pre><code [languages]=\"['xml']\"\r\n               [highlight]=\"'<ruby><rb>æ</rb><rt>wÇ</rt> <rb>ç</rb><rt>dÄ</rt> <rb>å</rb><rt>mÃ­ng</rt> <rb>å­</rb><rt>zÃ¬</rt></ruby>'\">\r\n    </code></pre>\r\n\r\n    <p>will look like this:</p>\r\n\r\n    <p class=\"chinese-font-size\">\r\n        <ruby>\r\n            <rb>æ</rb>\r\n            <rt>wÇ</rt>\r\n            <rb>ç</rb>\r\n            <rt>dÄ</rt>\r\n            <rb>å</rb>\r\n            <rt>mÃ­ng</rt>\r\n            <rb>å­</rb>\r\n            <rt>zÃ¬</rt>\r\n        </ruby>\r\n    </p>\r\n\r\n    <p>But writing whole sentences like this is going to get frustrating fast and hard to maintain. The Ruby Markup\r\n        language offers some short notations that allow the <b>rb</b> tags to be removed for example, which is a step in\r\n        the right direction. The following is equivalent to the above example:</p>\r\n\r\n    <pre><code [languages]=\"['xml']\"\r\n               [highlight]=\"'<ruby>æ<rt>wÇ</rt>ç<rt>dÄ</rt>å<rt>mÃ­ng</rt>å­<rt>zÃ¬</rt></ruby>'\">\r\n    </code></pre>\r\n\r\n    <p>I want to be able to copy paste or write whole sentences and add the pinyin separately without them intertwining\r\n        like this. Since no such library seemed to exist, I set out to make my own. I have the most experience with\r\n        Angular and my frontend is often built with Angular, so I created an Angular module. The html template will make\r\n        use of Ruby Markup.</p>\r\n\r\n    <p>The project starts out simple enough. I accept an input that accepts Chinese characters, an input for the\r\n        corresponding pinyin and loop over both inputs to match them:</p>\r\n\r\n    <pre><code [languages]=\"['xml']\"\r\n               [highlight]=\"'<ng-piao-liang-hanzi [chineseCharacters]=&quot;\\'æçåå­\\'&quot; [pinyin]=&quot;\\'wÇ dÄ mÃ­ng zÃ¬\\'&quot;></ng-piao-liang-hanzi>'\">\r\n    </code></pre>\r\n\r\n    <p>which will have the same output as above again. The pinyin is split by empty spaces. Add some fault tolerance to\r\n        allow for more or less pinyin to be defined than the amount of Chinese characters and we have a first viable\r\n        prototype. I found interesting npm packages including <a href=\"https://www.npmjs.com/package/chinese-to-pinyin\">chinese-to-pinyin</a>\r\n        which translates a set of Chinese characters to their pinyin. I incorporated this package into my own to allow\r\n        for automatic pinyin generation! We can now write:</p>\r\n\r\n    <pre><code [languages]=\"['xml']\"\r\n               [highlight]=\"'<ng-piao-liang-hanzi [chineseCharacters]=&quot;\\'æçåå­\\'&quot;></ng-piao-liang-hanzi>'\">\r\n    </code></pre>\r\n\r\n    <p>and it will still return the same output! This is much closer to what I had in mind originally. If the generated\r\n        pinyin is not correct it can still be overridden manually with the <code class=\"github-code\">pinyin</code> input\r\n        variable. There are more features available: pinyin in tone number format, pinyin skipping, pinyin for\r\n        alphabetical letters and css styling. See more details about the features and/or download <a\r\n            href=\"https://www.npmjs.com/package/ng-piao-liang-hanzi\">the package at npm</a>.</p>\r\n\r\n    <p>The code is available <a href=\"https://github.com/AlexanderTang/PiaoLiangHanzi\">in my repository on github</a>.\r\n        Feel free to log issues, feature requests or even add pull requests.</p>\r\n\r\n    <small>It managed to get 77 downloads within 17 hours of release! I am pleasantly surprised considering this is my\r\n        first npm package.\r\n    </small>\r\n\r\n</app-blog-post>\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../../shared/blog-post/blog-post.component.ngfactory\";\nimport * as i2 from \"../../../../../shared/blog-post/blog-post.component\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"ngx-highlightjs\";\nimport * as i6 from \"./spectator-testing.component\";\nvar styles_SpectatorTestingComponent = [];\nvar RenderType_SpectatorTestingComponent = i0.Éµcrt({ encapsulation: 2, styles: styles_SpectatorTestingComponent, data: {} });\nexport { RenderType_SpectatorTestingComponent as RenderType_SpectatorTestingComponent };\nexport function View_SpectatorTestingComponent_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 241, \"app-blog-post\", [], null, null, null, i1.View_BlogPostComponent_0, i1.RenderType_BlogPostComponent)), i0.Éµdid(1, 49152, null, 0, i2.BlogPostComponent, [i3.DOCUMENT], { postTitle: [0, \"postTitle\"], postDate: [1, \"postDate\"], postAbstract: [2, \"postAbstract\"] }, null), (_l()(), i0.Éµeld(2, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Most frontend developers will be familiar with the popular frameworks Karma and Jasmine. Personally I have had no practical experience with them in the 1.5 years I have been developing AngularJS and Angular applications. My team relies solely on Selenium to verify our frontend is still functioning, which has caused some problems before. In my opinion Selenium is fine to verify the user flow, but not to test the individual mechanics of each screen. The testing would get complicated very quickly. Unit testing is much better suited to ensure that your methods perform their task correctly. When you introduce logic in your code, whether frontend or backend or anywhere else, then test cases should be written alongside them.\"])), (_l()(), i0.Éµeld(4, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"I often create pet projects to play with a new framework or build something small. Lately I saw some posts about \"])), (_l()(), i0.Éµeld(6, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/ngneat/spectator\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Spectator\"])), (_l()(), i0.Éµted(-1, null, [\", a library that is supposed to make testing easier and more compact by removing common boilerplate code. This inspired me to use Spectator to try out frontend unit testing.\"])), (_l()(), i0.Éµeld(9, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"At the same time I will use \"])), (_l()(), i0.Éµeld(11, 0, null, null, 1, \"a\", [[\"href\", \"https://jestjs.io/\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Jest\"])), (_l()(), i0.Éµted(-1, null, [\" instead of Karma to run my tests with. Jest \"])), (_l()(), i0.Éµeld(14, 0, null, null, 1, \"a\", [[\"href\", \"https://medium.com/@wescopeland/easier-angular-unit-testing-af4b972fea12\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"is said to\"])), (_l()(), i0.Éµted(-1, null, [\" run faster due to parallel executions. It also runs without a browser instance which removes that startup time and eliminates the need for browsers to be available in CI environments such as Jenkins. That last point is moot if the e2e tests still use browsers, which I recommend. Browsers can still display different behaviors sometimes, which may cause a feature to work on one but not the other. Especially IE has been notorious for not respecting the W3 standards, though Edge is bringing improvement on that regard. For this reason tests will be more representative if they succeed on browsers most likely to be used.\"])), (_l()(), i0.Éµeld(17, 0, null, 0, 15, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"I followed the installation guide for these 2 frameworks from \"])), (_l()(), i0.Éµeld(19, 0, null, null, 1, \"a\", [[\"href\", \"https://itnext.io/testing-angular-applications-with-jest-and-spectator-c05991579807\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"itnext\"])), (_l()(), i0.Éµted(-1, null, [\", which worked fine so I will not repeat it here. I decided to apply Spectator testing to this very blog and \"])), (_l()(), i0.Éµeld(22, 0, null, null, 3, \"a\", [], [[1, \"target\", 0], [8, \"href\", 4]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i0.Éµnov(_v, 23).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i0.Éµdid(23, 671744, null, 0, i4.RouterLinkWithHref, [i4.Router, i4.ActivatedRoute, i3.LocationStrategy], { routerLink: [0, \"routerLink\"] }, null), i0.Éµpad(24, 1), (_l()(), i0.Éµted(-1, null, [\"the Angular library I built for my Chinese Study blog\"])), (_l()(), i0.Éµted(-1, null, [\". The links to these repositories are publicly available \"])), (_l()(), i0.Éµeld(27, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/AlexanderTang.github.io\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"here\"])), (_l()(), i0.Éµted(-1, null, [\" and \"])), (_l()(), i0.Éµeld(30, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/PiaoLiangHanzi\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"here\"])), (_l()(), i0.Éµted(-1, null, [\". The documentation of Spectator does a great job explaining how to setup testing for a wide range of scenarios, but in some more advanced cases I found myself needing a little more guidance. The lack of examples due to Spectator being new meant I had to work things out myself. I will elaborate on my solutions for problems I could not find online examples for. \"])), (_l()(), i0.Éµeld(33, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Basic example\"])), (_l()(), i0.Éµeld(35, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The \"])), (_l()(), i0.Éµeld(37, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/AlexanderTang.github.io/blob/dev/src/app/core/service/blogRoutingService.spec.ts\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"blogRoutingService test\"])), (_l()(), i0.Éµted(-1, null, [\" shows a simple example of how a Spectator test looks like:\"])), (_l()(), i0.Éµeld(40, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(41, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(42, 540672, null, 0, i5.Highlight, [i0.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(43, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(45, 0, null, 0, 10, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"I use Jest, so the import for \"])), (_l()(), i0.Éµeld(47, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"SpectatorService\"])), (_l()(), i0.Éµted(-1, null, [\" and \"])), (_l()(), i0.Éµeld(50, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"createServiceFactory\"])), (_l()(), i0.Éµted(-1, null, [\" should come from \"])), (_l()(), i0.Éµeld(53, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"'@ngneat/spectator/jest'\"])), (_l()(), i0.Éµted(-1, null, [\". \"])), (_l()(), i0.Éµeld(56, 0, null, 0, 13, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"In this test \"])), (_l()(), i0.Éµeld(58, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"spectator: SpectatorService\"])), (_l()(), i0.Éµted(-1, null, [\" represents a spectator wrapper of the service we are testing. We can call \"])), (_l()(), i0.Éµeld(61, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"spectator.service\"])), (_l()(), i0.Éµted(-1, null, [\" which will return the \"])), (_l()(), i0.Éµeld(64, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"BlogRoutingService\"])), (_l()(), i0.Éµted(-1, null, [\". All the methods of that class are available to be called. Typically we want to test each public method in separate test cases. In the example above \"])), (_l()(), i0.Éµeld(67, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"getAllBlogPosts()\"])), (_l()(), i0.Éµted(-1, null, [\" is being tested.\"])), (_l()(), i0.Éµeld(70, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The spectator wrapper also provides other functionality which we are not making use of yet in this example. \"])), (_l()(), i0.Éµeld(72, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"spectator.get\"])), (_l()(), i0.Éµted(-1, null, [\" is used to return a mocked object. \"])), (_l()(), i0.Éµeld(75, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"spectator.query\"])), (_l()(), i0.Éµted(-1, null, [\" can be used to validate the DOM. How to use these functions and more will be shown in the more advanced examples that follow.\"])), (_l()(), i0.Éµeld(78, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Host component with input\"])), (_l()(), i0.Éµeld(80, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"If we wish to test a component by its component selector, then \"])), (_l()(), i0.Éµeld(82, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"SpectatorHost\"])), (_l()(), i0.Éµted(-1, null, [\" should be used. \"])), (_l()(), i0.Éµeld(85, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/PiaoLiangHanzi/blob/master/projects/ng-piao-liang-hanzi/src/lib/ng-piao-liang-hanzi.component.spec.ts\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"NgPiaoLiangHanziComponent\"])), (_l()(), i0.Éµted(-1, null, [\" provides an example.\"])), (_l()(), i0.Éµeld(88, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(89, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(90, 540672, null, 0, i5.Highlight, [i0.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(91, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(93, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"In this example, we pass the html template of the component we want to test as a parameter to \"])), (_l()(), i0.Éµeld(95, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"createComponent\"])), (_l()(), i0.Éµted(-1, null, [\". The input parameters are defined exactly the same as using the component in production code. Using \"])), (_l()(), i0.Éµeld(98, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"spectator.component\"])), (_l()(), i0.Éµted(-1, null, [\" we can access not only the methods, but also the (public) fields for validation.\"])), (_l()(), i0.Éµeld(101, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"One more interesting note is the use of \"])), (_l()(), i0.Éµeld(103, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"spectator.query\"])), (_l()(), i0.Éµted(-1, null, [\". By matching DOM elements, the content on display can be tested.\"])), (_l()(), i0.Éµeld(106, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Setting providers\"])), (_l()(), i0.Éµeld(108, 0, null, 0, 6, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(109, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/PiaoLiangHanzi/blob/master/projects/ng-piao-liang-hanzi/src/lib/ng-piao-liang-hanzi.component.spec.ts\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"NgPiaoLiangHanziComponent\"])), (_l()(), i0.Éµted(-1, null, [\" also makes use of providers to enable module level parameters. For example \"])), (_l()(), i0.Éµeld(112, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"ENABLE_ALPHABET\"])), (_l()(), i0.Éµted(-1, null, [\" is a boolean that will enable/disable the use of alphabetical characters. In the test the component can be created to have a default provider like this:\"])), (_l()(), i0.Éµeld(115, 0, null, 0, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(116, 0, null, null, 2, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(117, 540672, null, 0, i5.Highlight, [i0.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(118, 1), (_l()(), i0.Éµeld(119, 0, null, 0, 10, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"This provider value will be set to \"])), (_l()(), i0.Éµeld(121, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"false\"])), (_l()(), i0.Éµted(-1, null, [\" for every component that is created by \"])), (_l()(), i0.Éµeld(124, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"createComponent(...)\"])), (_l()(), i0.Éµted(-1, null, [\". Should we want to override the value to \"])), (_l()(), i0.Éµeld(127, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"true\"])), (_l()(), i0.Éµted(-1, null, [\" in specific cases, then we can override the provider at the time of creation:\"])), (_l()(), i0.Éµeld(130, 0, null, 0, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(131, 0, null, null, 2, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(132, 540672, null, 0, i5.Highlight, [i0.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(133, 1), (_l()(), i0.Éµeld(134, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Re-initialize component\"])), (_l()(), i0.Éµeld(136, 0, null, 0, 13, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"If the component to test needs to perform some form of initialization, there is a good chance it will make use of external parameters such as a route query parameter or component input. In \"])), (_l()(), i0.Éµeld(138, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/AlexanderTang.github.io/blob/dev/src/app/shared/blog-overview/blog-overview.component.ts\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"BlogOverviewComponent\"])), (_l()(), i0.Éµted(-1, null, [\" the \"])), (_l()(), i0.Éµeld(141, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"ngOnInit()\"])), (_l()(), i0.Éµted(-1, null, [\" method will make use of input variable \"])), (_l()(), i0.Éµeld(144, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"blogPosts\"])), (_l()(), i0.Éµted(-1, null, [\" and query parameter \"])), (_l()(), i0.Éµeld(147, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"page\"])), (_l()(), i0.Éµted(-1, null, [\". The code will look something like this: \"])), (_l()(), i0.Éµeld(150, 0, null, 0, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(151, 0, null, null, 2, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(152, 540672, null, 0, i5.Highlight, [i0.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(153, 1), (_l()(), i0.Éµeld(154, 0, null, 0, 10, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"This will not work because the initialization of the component is triggered in the \"])), (_l()(), i0.Éµeld(156, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"beforeEach\"])), (_l()(), i0.Éµted(-1, null, [\" where the spectator is being created. At that time the input \"])), (_l()(), i0.Éµeld(159, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"blogPosts\"])), (_l()(), i0.Éµted(-1, null, [\" has not been set yet and the query parameter \"])), (_l()(), i0.Éµeld(162, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"page\"])), (_l()(), i0.Éµted(-1, null, [\" still holds the default value 1. A simple fix for this is to simply re-initialize the component before validation:\"])), (_l()(), i0.Éµeld(165, 0, null, 0, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(166, 0, null, null, 2, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(167, 540672, null, 0, i5.Highlight, [i0.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(168, 1), (_l()(), i0.Éµeld(169, 0, null, 0, 10, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Note that the \"])), (_l()(), i0.Éµeld(171, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"SpectatorHost\"])), (_l()(), i0.Éµted(-1, null, [\" would not have had this issue since the parameters are passed in the html template, which happens at creation time of the spectator. The downside of using \"])), (_l()(), i0.Éµeld(174, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"createHostFactory\"])), (_l()(), i0.Éµted(-1, null, [\" is that we lose the routing functionality that \"])), (_l()(), i0.Éµeld(177, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"SpectatorRouting\"])), (_l()(), i0.Éµted(-1, null, [\" provides us with.\"])), (_l()(), i0.Éµeld(180, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Suspend component initialization\"])), (_l()(), i0.Éµeld(182, 0, null, 0, 10, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The previous example works fine if \"])), (_l()(), i0.Éµeld(184, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"ngOnInit()\"])), (_l()(), i0.Éµted(-1, null, [\" does not throw an error. But if it does or the html template requires parameters to be present, then the above solution is insufficient. I encountered this problem with \"])), (_l()(), i0.Éµeld(187, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/AlexanderTang.github.io/blob/dev/src/app/core/breadcrumb/custom-breadcrumb.component.ts\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"my breadcrumb component\"])), (_l()(), i0.Éµted(-1, null, [\" where the html template needs to parse the router url. Since this happens on initialization, the mock needs to make that data available before that. \"])), (_l()(), i0.Éµeld(190, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/AlexanderTang.github.io/blob/dev/src/app/core/breadcrumb/custom-breadcrumb.component.spec.ts\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"This test suite\"])), (_l()(), i0.Éµted(-1, null, [\" shows the solution to this problem:\"])), (_l()(), i0.Éµeld(193, 0, null, 0, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(194, 0, null, null, 2, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(195, 540672, null, 0, i5.Highlight, [i0.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(196, 1), (_l()(), i0.Éµeld(197, 0, null, 0, 16, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The key thing to note is that \"])), (_l()(), i0.Éµeld(199, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"detectChanges\"])), (_l()(), i0.Éµted(-1, null, [\" is set to \"])), (_l()(), i0.Éµeld(202, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"false\"])), (_l()(), i0.Éµted(-1, null, [\" at factory level. This will suspend initialization of the component, even when it is created in \"])), (_l()(), i0.Éµeld(205, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"beforeEach()\"])), (_l()(), i0.Éµted(-1, null, [\". In the test case a mock value is set for the \"])), (_l()(), i0.Éµeld(208, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"routerMock.parseUrl\"])), (_l()(), i0.Éµted(-1, null, [\" method. With \"])), (_l()(), i0.Éµeld(211, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"spectator.detectChanges()\"])), (_l()(), i0.Éµted(-1, null, [\" initialization is allowed to start, but this time with the router properly configured!\"])), (_l()(), i0.Éµeld(214, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Validate method calls\"])), (_l()(), i0.Éµeld(216, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Finally I want to show a small example how you can verify if mock methods have been called. This is often interesting to make sure the conditions to call a method have been reached, without actually testing the method itself. The \"])), (_l()(), i0.Éµeld(218, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AlexanderTang/AlexanderTang.github.io/blob/dev/src/app/shared/blog-sidebar/search/blog-sidebar-search.component.spec.ts\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"BlogSidebarSearch test\"])), (_l()(), i0.Éµted(-1, null, [\" provides an example:\"])), (_l()(), i0.Éµeld(221, 0, null, 0, 3, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(222, 0, null, null, 2, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(223, 540672, null, 0, i5.Highlight, [i0.ElementRef, i5.HighlightJS, [2, i5.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(224, 1), (_l()(), i0.Éµeld(225, 0, null, 0, 13, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Most of the code is explanatory by now. The only thing 'new' is the \"])), (_l()(), i0.Éµeld(227, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"spyOn\"])), (_l()(), i0.Éµted(-1, null, [\" method which accepts parameters for the mock to test and a method name of that mock, which in this case is \"])), (_l()(), i0.Éµeld(230, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"navigate()\"])), (_l()(), i0.Éµted(-1, null, [\". \"])), (_l()(), i0.Éµeld(233, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"spyOn\"])), (_l()(), i0.Éµted(-1, null, [\" returns an object of type \"])), (_l()(), i0.Éµeld(236, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"jasmine.Spy\"])), (_l()(), i0.Éµted(-1, null, [\". This is part of Jest its library making use of the Jasmine API, so for Jasmine users this will probably look familiar. The spy object can be used to verify the method has been called, with the option to test its parameters as well.\"])), (_l()(), i0.Éµeld(239, 0, null, 0, 0, \"hr\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(240, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"These solutions are the results of my experimentation and can most likely be improved upon. If you find a 'better/cleaner' way to improve my code, you are definitely encouraged to enlighten me about it. You can send me a mail or better yet, make a pull request! If you have questions instead you are also free to contact me.\"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.postTitle(); var currVal_1 = _co.postDate(); var currVal_2 = _co.postAbstract(); _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2); var currVal_5 = _ck(_v, 24, 0, \"/blogs/dev/ng-plh\"); _ck(_v, 23, 0, currVal_5); var currVal_7 = \"describe('BlogRoutingService', () => {\\n    let spectator: SpectatorService<BlogRoutingService>;\\n    const createService = createServiceFactory(BlogRoutingService);\\n\\n    beforeEach(() => spectator = createService());\\n\\n    it('getAllBlogPosts - contains posts', () => {\\n        const allBlogPosts: IBlogPost[] = spectator.service.getAllBlogPosts();\\n        expect(allBlogPosts.map((blogPost: IBlogPost) => blogPost.postTitle))\\n            .toContain('Differences between RSA and HMAC');\\n    });\"; var currVal_8 = _ck(_v, 43, 0, \"typescript\"); _ck(_v, 42, 0, currVal_7, currVal_8); var currVal_10 = \"describe('NgPiaoLiangHanziComponent', () => {\\n  let spectator: SpectatorHost<NgPiaoLiangHanziComponent>;\\n  const createComponent = createHostFactory({\\n    component: NgPiaoLiangHanziComponent\\n  });\\n\\n  describe('Basic pinyin functionality', () => {\\n    it('Pinyin missing - pinyin generated automatically', () => {\\n      spectator = createComponent(`<ng-piao-liang-hanzi [chineseCharacters]=\\\"'\\u4F7F\\u7528'\\\"></ng-piao-liang-hanzi>`);\\n\\n      expect(spectator.component.chineseCharacters).toEqual('\\u4F7F\\u7528');\\n      expect(spectator.component.pinyin).toEqual('sh\\u01D0 y\\u00F2ng');\\n      expect(spectator.component.charPinyinArray.length).toEqual(2);\\n      expect(spectator.component.charPinyinArray).toContainEqual({'char': '\\u4F7F', 'pinyin': 'sh\\u01D0'});\\n      expect(spectator.component.charPinyinArray).toContainEqual({'char': '\\u7528', 'pinyin': 'y\\u00F2ng'});\\n      expect(spectator.query('ng-piao-liang-hanzi > ruby:nth-child(1) > rb')).toHaveText('\\u4F7F');\\n      expect(spectator.query('ng-piao-liang-hanzi > ruby:nth-child(1) > rt')).toHaveText('sh\\u01D0');\\n      expect(spectator.query('ng-piao-liang-hanzi > ruby:nth-child(2) > rb')).toHaveText('\\u7528');\\n      expect(spectator.query('ng-piao-liang-hanzi > ruby:nth-child(2) > rt')).toHaveText('y\\u00F2ng');\\n    });\"; var currVal_11 = _ck(_v, 91, 0, \"typescript\"); _ck(_v, 90, 0, currVal_10, currVal_11); var currVal_13 = \"describe('NgPiaoLiangHanziComponent', () => {\\n  let spectator: SpectatorHost<NgPiaoLiangHanziComponent>;\\n  const createComponent = createHostFactory({\\n    component: NgPiaoLiangHanziComponent,\\n    providers: [{provide: 'ENABLE_ALPHABET', useValue: false}]\\n  });\"; var currVal_14 = _ck(_v, 118, 0, \"typescript\"); _ck(_v, 117, 0, currVal_13, currVal_14); var currVal_16 = \"it('Include alphabet - module parameter', () => {\\n      spectator = createComponent(`<ng-piao-liang-hanzi [chineseCharacters]=\\\"'Ab\\u4F7F,\\u7528?'\\\"></ng-piao-liang-hanzi>`,\\n        {providers: [{provide: 'ENABLE_ALPHABET', useValue: true}]});\"; var currVal_17 = _ck(_v, 133, 0, \"typescript\"); _ck(_v, 132, 0, currVal_16, currVal_17); var currVal_19 = \"describe('BlogOverviewComponent', () => {\\n    let spectator: SpectatorRouting<BlogOverviewComponent>;\\n    const createComponent = createRoutingFactory({\\n        component: BlogOverviewComponent,\\n        queryParams: {page: 1}\\n    });\\n\\n    beforeEach(() => spectator = createComponent());\\n\\n    it('blogPostsForCurrentPage - page 2', () => {\\n        spectator.setRouteQueryParam('page', '2');\\n        spectator.setInput(\\\"blogPosts\\\", blogPosts);\\n\\n        expect(spectator.component.currentPage).toEqual(1);\\n    });\"; var currVal_20 = _ck(_v, 153, 0, \"typescript\"); _ck(_v, 152, 0, currVal_19, currVal_20); var currVal_22 = \"it('blogPostsForCurrentPage - page 2', () => {\\n        spectator.setRouteQueryParam('page', '2');\\n        spectator.setInput(\\\"blogPosts\\\", blogPosts);\\n        spectator.component.ngOnInit();\\n\\n        expect(spectator.component.currentPage).toEqual(1);\\n    });\"; var currVal_23 = _ck(_v, 168, 0, \"typescript\"); _ck(_v, 167, 0, currVal_22, currVal_23); var currVal_25 = \"describe('CustomBreadcrumbComponent', () => {\\n    let routerMock: SpyObject<Router>;\\n    let spectator: SpectatorRouting<CustomBreadcrumbComponent>;\\n    const createComponent = createRoutingFactory({\\n        detectChanges: false,\\n        component: CustomBreadcrumbComponent\\n    });\\n\\n    beforeEach(() => {\\n        spectator = createComponent();\\n        routerMock = spectator.get<Router>(Router);\\n    });\\n\\n    it('isHomeBreadcrumbItem - Home', () => {\\n        routerMock.parseUrl.andReturn({root: {children: {'primary': {segments: [{path: ''}]}}}});\\n        spectator.detectChanges();\\n\\n        expect(spectator.component.isHomeBreadcrumbItem('Home')).toBeTruthy();\\n    });\"; var currVal_26 = _ck(_v, 196, 0, \"typescript\"); _ck(_v, 195, 0, currVal_25, currVal_26); var currVal_28 = \"describe('BlogSidebarSearchComponent', () => {\\n    let routerMock: SpyObject<Router>;\\n    let spectator: SpectatorRouting<BlogSidebarSearchComponent>;\\n    const createComponent = createRoutingFactory(...);\\n\\n    beforeEach(() => {...});\\n\\n    it('onSubmitSearch', () => {\\n        spectator.component.searchTerm = 'testSearchTerm';\\n        const routerNavigation = spyOn(routerMock, 'navigate');\\n\\n        spectator.component.onSubmitSearch();\\n\\n        expect(routerNavigation).toHaveBeenCalledWith(['/search-results'], {queryParams: {'search-term': 'testSearchTerm'}});\\n    });\"; var currVal_29 = _ck(_v, 224, 0, \"typescript\"); _ck(_v, 223, 0, currVal_28, currVal_29); }, function (_ck, _v) { var currVal_3 = i0.Éµnov(_v, 23).target; var currVal_4 = i0.Éµnov(_v, 23).href; _ck(_v, 22, 0, currVal_3, currVal_4); var currVal_6 = true; _ck(_v, 41, 0, currVal_6); var currVal_9 = true; _ck(_v, 89, 0, currVal_9); var currVal_12 = true; _ck(_v, 116, 0, currVal_12); var currVal_15 = true; _ck(_v, 131, 0, currVal_15); var currVal_18 = true; _ck(_v, 151, 0, currVal_18); var currVal_21 = true; _ck(_v, 166, 0, currVal_21); var currVal_24 = true; _ck(_v, 194, 0, currVal_24); var currVal_27 = true; _ck(_v, 222, 0, currVal_27); }); }\nexport function View_SpectatorTestingComponent_Host_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 1, \"app-spectator-testing\", [], null, null, null, View_SpectatorTestingComponent_0, RenderType_SpectatorTestingComponent)), i0.Éµdid(1, 49152, null, 0, i6.SpectatorTestingComponent, [], null, null)], null, null); }\nvar SpectatorTestingComponentNgFactory = i0.Éµccf(\"app-spectator-testing\", i6.SpectatorTestingComponent, View_SpectatorTestingComponent_Host_0, {}, {}, []);\nexport { SpectatorTestingComponentNgFactory as SpectatorTestingComponentNgFactory };\n","<app-blog-post\r\n    [postTitle]=\"postTitle()\"\r\n    [postDate]=\"postDate()\"\r\n    [postAbstract]=\"postAbstract()\">\r\n\r\n    <p>Most frontend developers will be familiar with the popular frameworks Karma and Jasmine. Personally I have had no\r\n        practical experience with them in the 1.5 years I have been developing AngularJS and Angular applications. My\r\n        team relies solely on Selenium to verify our frontend is still functioning, which has caused some problems\r\n        before.\r\n        In my opinion Selenium is fine to verify the user flow, but not to test the individual mechanics of each screen.\r\n        The testing would get complicated very quickly. Unit testing is much better suited to ensure that your methods\r\n        perform their task correctly. When you introduce logic in your code, whether frontend or backend or anywhere\r\n        else, then test cases should be written alongside them.</p>\r\n\r\n    <p>I often create pet projects to play with a new framework or build something small. Lately I saw some posts about\r\n        <a href=\"https://github.com/ngneat/spectator\">Spectator</a>, a library that is supposed to make testing easier\r\n        and more compact by removing common boilerplate code. This inspired me to use Spectator to try out frontend\r\n        unit testing.</p>\r\n\r\n    <p>At the same time I will use <a href=\"https://jestjs.io/\">Jest</a> instead of Karma to run my tests with. Jest <a\r\n        href=\"https://medium.com/@wescopeland/easier-angular-unit-testing-af4b972fea12\">is said to</a> run faster due to\r\n        parallel executions. It also runs without a browser instance which removes that startup time and eliminates the\r\n        need for browsers to be available in CI environments such as Jenkins. That last point is moot if the e2e tests\r\n        still use browsers, which I recommend. Browsers can still display different behaviors sometimes, which may cause\r\n        a feature to work on one but not the other. Especially IE has been notorious for not respecting the W3\r\n        standards, though Edge is bringing improvement on that regard. For this reason tests will be more representative\r\n        if they succeed on browsers most likely to be used.</p>\r\n\r\n    <p>I followed the installation guide for these 2 frameworks from <a\r\n        href=\"https://itnext.io/testing-angular-applications-with-jest-and-spectator-c05991579807\">itnext</a>, which\r\n        worked fine so I will not repeat it here. I decided to apply Spectator testing to this very blog and <a\r\n            [routerLink]=\"['/blogs/dev/ng-plh']\">the Angular library I built for my Chinese Study blog</a>. The links to\r\n        these repositories are publicly available <a href=\"https://github.com/AlexanderTang/AlexanderTang.github.io\">here</a>\r\n        and <a href=\"https://github.com/AlexanderTang/PiaoLiangHanzi\">here</a>. The documentation of Spectator does a\r\n        great job explaining how to setup testing for a wide range of scenarios, but in some more advanced cases\r\n        I found myself needing a little more guidance. The lack of examples due to Spectator being new meant I had to\r\n        work things out myself. I will elaborate on my solutions for problems I could not find online examples for.\r\n    </p>\r\n\r\n    <h3>Basic example</h3>\r\n\r\n    <p>The <a\r\n        href=\"https://github.com/AlexanderTang/AlexanderTang.github.io/blob/dev/src/app/core/service/blogRoutingService.spec.ts\">blogRoutingService\r\n        test</a> shows a simple example of how a Spectator test looks like:</p>\r\n\r\n    <pre><code [languages]=\"['typescript']\" [highlight]=\"'describe(\\'BlogRoutingService\\', () => {\r\n    let spectator: SpectatorService<BlogRoutingService>;\r\n    const createService = createServiceFactory(BlogRoutingService);\r\n\r\n    beforeEach(() => spectator = createService());\r\n\r\n    it(\\'getAllBlogPosts - contains posts\\', () => {\r\n        const allBlogPosts: IBlogPost[] = spectator.service.getAllBlogPosts();\r\n        expect(allBlogPosts.map((blogPost: IBlogPost) => blogPost.postTitle))\r\n            .toContain(\\'Differences between RSA and HMAC\\');\r\n    });'\">\r\n    </code></pre>\r\n\r\n    <p>I use Jest, so the import for <code class=\"github-code\">SpectatorService</code> and <code\r\n        class=\"github-code\">createServiceFactory</code> should come from <code class=\"github-code\">'@ngneat/spectator/jest'</code>.\r\n    </p>\r\n\r\n    <p>In this test <code class=\"github-code\">spectator: SpectatorService</code> represents a spectator wrapper of the\r\n        service we are testing. We can call <code class=\"github-code\">spectator.service</code> which will return the\r\n        <code class=\"github-code\">BlogRoutingService</code>. All the methods of that class are available to be called.\r\n        Typically we want to test each public method in separate test cases. In the example above <code\r\n            class=\"github-code\">getAllBlogPosts()</code> is being tested.</p>\r\n\r\n    <p>The spectator wrapper also provides other functionality which we are not making use of yet in this example. <code\r\n        class=\"github-code\">spectator.get</code> is used to return a mocked object. <code class=\"github-code\">spectator.query</code>\r\n        can be used to validate the DOM. How to use these functions and more will be shown in the more advanced examples\r\n        that follow.</p>\r\n\r\n    <h3>Host component with input</h3>\r\n\r\n    <p>If we wish to test a component by its component selector, then <code class=\"github-code\">SpectatorHost</code>\r\n        should be used. <a\r\n            href=\"https://github.com/AlexanderTang/PiaoLiangHanzi/blob/master/projects/ng-piao-liang-hanzi/src/lib/ng-piao-liang-hanzi.component.spec.ts\">NgPiaoLiangHanziComponent</a>\r\n        provides an example.</p>\r\n\r\n    <pre><code [languages]=\"['typescript']\" [highlight]=\"'describe(\\'NgPiaoLiangHanziComponent\\', () => {\r\n  let spectator: SpectatorHost<NgPiaoLiangHanziComponent>;\r\n  const createComponent = createHostFactory({\r\n    component: NgPiaoLiangHanziComponent\r\n  });\r\n\r\n  describe(\\'Basic pinyin functionality\\', () => {\r\n    it(\\'Pinyin missing - pinyin generated automatically\\', () => {\r\n      spectator = createComponent(&#96;<ng-piao-liang-hanzi [chineseCharacters]=&quot;\\'ä½¿ç¨\\'&quot;></ng-piao-liang-hanzi>&#96;);\r\n\r\n      expect(spectator.component.chineseCharacters).toEqual(\\'ä½¿ç¨\\');\r\n      expect(spectator.component.pinyin).toEqual(\\'shÇ yÃ²ng\\');\r\n      expect(spectator.component.charPinyinArray.length).toEqual(2);\r\n      expect(spectator.component.charPinyinArray).toContainEqual({\\'char\\': \\'ä½¿\\', \\'pinyin\\': \\'shÇ\\'});\r\n      expect(spectator.component.charPinyinArray).toContainEqual({\\'char\\': \\'ç¨\\', \\'pinyin\\': \\'yÃ²ng\\'});\r\n      expect(spectator.query(\\'ng-piao-liang-hanzi > ruby:nth-child(1) > rb\\')).toHaveText(\\'ä½¿\\');\r\n      expect(spectator.query(\\'ng-piao-liang-hanzi > ruby:nth-child(1) > rt\\')).toHaveText(\\'shÇ\\');\r\n      expect(spectator.query(\\'ng-piao-liang-hanzi > ruby:nth-child(2) > rb\\')).toHaveText(\\'ç¨\\');\r\n      expect(spectator.query(\\'ng-piao-liang-hanzi > ruby:nth-child(2) > rt\\')).toHaveText(\\'yÃ²ng\\');\r\n    });'\">\r\n    </code></pre>\r\n\r\n    <p>In this example, we pass the html template of the component we want to test as a parameter to <code\r\n        class=\"github-code\">createComponent</code>. The input parameters are defined exactly the same as using the\r\n        component in production code. Using <code class=\"github-code\">spectator.component</code> we can access not only\r\n        the methods, but also the (public) fields for validation.</p>\r\n\r\n    <p>One more interesting note is the use of <code class=\"github-code\">spectator.query</code>. By matching DOM\r\n        elements, the content on display can be tested.</p>\r\n\r\n    <h3>Setting providers</h3>\r\n\r\n    <p><a\r\n        href=\"https://github.com/AlexanderTang/PiaoLiangHanzi/blob/master/projects/ng-piao-liang-hanzi/src/lib/ng-piao-liang-hanzi.component.spec.ts\">NgPiaoLiangHanziComponent</a>\r\n        also makes use of providers to enable module level parameters. For example <i>ENABLE_ALPHABET</i> is a boolean\r\n        that will enable/disable the use of alphabetical characters. In the test the component can be created to have a\r\n        default provider like this:</p>\r\n\r\n    <pre><code [languages]=\"['typescript']\" [highlight]=\"'describe(\\'NgPiaoLiangHanziComponent\\', () => {\r\n  let spectator: SpectatorHost<NgPiaoLiangHanziComponent>;\r\n  const createComponent = createHostFactory({\r\n    component: NgPiaoLiangHanziComponent,\r\n    providers: [{provide: \\'ENABLE_ALPHABET\\', useValue: false}]\r\n  });'\"></code></pre>\r\n\r\n    <p>This provider value will be set to <i>false</i> for every component that is created by <code\r\n        class=\"github-code\">createComponent(...)</code>. Should we want to override the value to <i>true</i> in specific\r\n        cases, then we can override the provider at the time of creation:</p>\r\n\r\n    <pre><code [languages]=\"['typescript']\" [highlight]=\"'it(\\'Include alphabet - module parameter\\', () => {\r\n      spectator = createComponent(&#96;<ng-piao-liang-hanzi [chineseCharacters]=&quot;\\'Abä½¿,ç¨?\\'&quot;></ng-piao-liang-hanzi>&#96;,\r\n        {providers: [{provide: \\'ENABLE_ALPHABET\\', useValue: true}]});'\"></code></pre>\r\n\r\n    <h3>Re-initialize component</h3>\r\n\r\n    <p>If the component to test needs to perform some form of initialization, there is a good chance it will make use of\r\n        external parameters such as a route query parameter or component input. In <a\r\n            href=\"https://github.com/AlexanderTang/AlexanderTang.github.io/blob/dev/src/app/shared/blog-overview/blog-overview.component.ts\">BlogOverviewComponent</a>\r\n        the <code class=\"github-code\">ngOnInit()</code> method will make use of input variable <b>blogPosts</b> and\r\n        query parameter <b>page</b>. The code will look something like this:\r\n    </p>\r\n\r\n    <pre><code [languages]=\"['typescript']\" [highlight]=\"'describe(\\'BlogOverviewComponent\\', () => {\r\n    let spectator: SpectatorRouting<BlogOverviewComponent>;\r\n    const createComponent = createRoutingFactory({\r\n        component: BlogOverviewComponent,\r\n        queryParams: {page: 1}\r\n    });\r\n\r\n    beforeEach(() => spectator = createComponent());\r\n\r\n    it(\\'blogPostsForCurrentPage - page 2\\', () => {\r\n        spectator.setRouteQueryParam(\\'page\\', \\'2\\');\r\n        spectator.setInput(&quot;blogPosts&quot;, blogPosts);\r\n\r\n        expect(spectator.component.currentPage).toEqual(1);\r\n    });'\"></code></pre>\r\n\r\n    <p>This will not work because the initialization of the component is triggered in the <i>beforeEach</i> where the\r\n        spectator is being created. At that time the input <b>blogPosts</b> has not been set yet and the query parameter\r\n        <b>page</b> still holds the default value 1. A simple fix for this is to simply re-initialize the component\r\n        before validation:</p>\r\n\r\n    <pre><code [languages]=\"['typescript']\" [highlight]=\"'it(\\'blogPostsForCurrentPage - page 2\\', () => {\r\n        spectator.setRouteQueryParam(\\'page\\', \\'2\\');\r\n        spectator.setInput(&quot;blogPosts&quot;, blogPosts);\r\n        spectator.component.ngOnInit();\r\n\r\n        expect(spectator.component.currentPage).toEqual(1);\r\n    });'\"></code></pre>\r\n\r\n    <p>Note that the <code class=\"github-code\">SpectatorHost</code> would not have had this issue since the parameters\r\n        are passed in the html template, which happens at creation time of the spectator. The downside of using <i>createHostFactory</i>\r\n        is that we lose the routing functionality that <code class=\"github-code\">SpectatorRouting</code> provides us\r\n        with.</p>\r\n\r\n    <h3>Suspend component initialization</h3>\r\n\r\n    <p>The previous example works fine if <code class=\"github-code\">ngOnInit()</code> does not throw an error. But if\r\n        it does or the html template requires parameters to be present, then the above solution is insufficient. I\r\n        encountered this problem with\r\n        <a href=\"https://github.com/AlexanderTang/AlexanderTang.github.io/blob/dev/src/app/core/breadcrumb/custom-breadcrumb.component.ts\">my\r\n            breadcrumb component</a> where the html template needs to parse the router url. Since this happens on\r\n        initialization, the mock needs to make that data available before that. <a\r\n            href=\"https://github.com/AlexanderTang/AlexanderTang.github.io/blob/dev/src/app/core/breadcrumb/custom-breadcrumb.component.spec.ts\">This\r\n            test suite</a> shows the solution to this problem:</p>\r\n\r\n    <pre><code [languages]=\"['typescript']\" [highlight]=\"'describe(\\'CustomBreadcrumbComponent\\', () => {\r\n    let routerMock: SpyObject<Router>;\r\n    let spectator: SpectatorRouting<CustomBreadcrumbComponent>;\r\n    const createComponent = createRoutingFactory({\r\n        detectChanges: false,\r\n        component: CustomBreadcrumbComponent\r\n    });\r\n\r\n    beforeEach(() => {\r\n        spectator = createComponent();\r\n        routerMock = spectator.get<Router>(Router);\r\n    });\r\n\r\n    it(\\'isHomeBreadcrumbItem - Home\\', () => {\r\n        routerMock.parseUrl.andReturn({root: {children: {\\'primary\\': {segments: [{path: \\'\\'}]}}}});\r\n        spectator.detectChanges();\r\n\r\n        expect(spectator.component.isHomeBreadcrumbItem(\\'Home\\')).toBeTruthy();\r\n    });'\"></code></pre>\r\n\r\n    <p>The key thing to note is that <i>detectChanges</i> is set to <i>false</i> at factory level. This will suspend\r\n        initialization of the component, even when it is created in <i>beforeEach()</i>. In the test case a mock\r\n        value is set for the <code class=\"github-code\">routerMock.parseUrl</code> method. With <code\r\n            class=\"github-code\">spectator.detectChanges()</code> initialization is allowed to start, but this time with\r\n        the router properly configured!</p>\r\n\r\n    <h3>Validate method calls</h3>\r\n\r\n    <p>Finally I want to show a small example how you can verify if mock methods have been called. This is often\r\n        interesting to make sure the conditions to call a method have been reached, without actually testing the method\r\n        itself. The <a\r\n            href=\"https://github.com/AlexanderTang/AlexanderTang.github.io/blob/dev/src/app/shared/blog-sidebar/search/blog-sidebar-search.component.spec.ts\">BlogSidebarSearch\r\n            test</a> provides an example:</p>\r\n\r\n    <pre><code [languages]=\"['typescript']\" [highlight]=\"'describe(\\'BlogSidebarSearchComponent\\', () => {\r\n    let routerMock: SpyObject<Router>;\r\n    let spectator: SpectatorRouting<BlogSidebarSearchComponent>;\r\n    const createComponent = createRoutingFactory(...);\r\n\r\n    beforeEach(() => {...});\r\n\r\n    it(\\'onSubmitSearch\\', () => {\r\n        spectator.component.searchTerm = \\'testSearchTerm\\';\r\n        const routerNavigation = spyOn(routerMock, \\'navigate\\');\r\n\r\n        spectator.component.onSubmitSearch();\r\n\r\n        expect(routerNavigation).toHaveBeenCalledWith([\\'/search-results\\'], {queryParams: {\\'search-term\\': \\'testSearchTerm\\'}});\r\n    });'\"></code></pre>\r\n\r\n    <p>Most of the code is explanatory by now. The only thing 'new' is the <code class=\"github-code\">spyOn</code> method\r\n        which accepts parameters for the mock to test and a method name of that mock, which in this case is <code\r\n            class=\"github-code\">navigate()</code>.\r\n        <code class=\"github-code\">spyOn</code> returns an object of type <code class=\"github-code\">jasmine.Spy</code>.\r\n        This is part of Jest its library making use of the Jasmine API, so for Jasmine users this will probably look\r\n        familiar. The spy object can be used to verify the method has been called, with the option to test its\r\n        parameters as well.</p>\r\n\r\n    <hr>\r\n\r\n    <p>These solutions are the results of my experimentation and can most likely be improved upon. If you find a\r\n        'better/cleaner' way to improve my code, you are definitely encouraged to enlighten me about it. You can send me\r\n        a mail or better yet, make a pull request! If you have questions instead you are also free to contact me.</p>\r\n</app-blog-post>\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../../shared/blog-post/blog-post.component.ngfactory\";\nimport * as i2 from \"../../../../../shared/blog-post/blog-post.component\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ngx-highlightjs\";\nimport * as i5 from \"./automated-devops.component\";\nvar styles_AutomatedDevopsComponent = [];\nvar RenderType_AutomatedDevopsComponent = i0.Éµcrt({ encapsulation: 2, styles: styles_AutomatedDevopsComponent, data: {} });\nexport { RenderType_AutomatedDevopsComponent as RenderType_AutomatedDevopsComponent };\nexport function View_AutomatedDevopsComponent_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 216, \"app-blog-post\", [], null, null, null, i1.View_BlogPostComponent_0, i1.RenderType_BlogPostComponent)), i0.Éµdid(1, 49152, null, 0, i2.BlogPostComponent, [i3.DOCUMENT], { postTitle: [0, \"postTitle\"], postDate: [1, \"postDate\"], postAbstract: [2, \"postAbstract\"] }, null), (_l()(), i0.Éµeld(2, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Why use Docker?\"])), (_l()(), i0.Éµeld(4, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"In today's world more and more applications become Dockerized, thanks to its ability to provide consistent behavior across multiple platforms. That means if you deploy a Docker image with version 1.0.0 on your test environment, then you are sure that it will behave exactly the same on acceptance and production! Anyone who has dealt with platform-specific issues due to minuscule differences, which are often difficult to debug, can testify what a blessing this is.\"])), (_l()(), i0.Éµeld(6, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Furthermore, Docker in combination with Kubernetes (and any of its offspring such as Openshift) allows for easy scaling. There are settings available for automated scaling based on current needs or expected peaks. For example, scale up extra Docker containers when >80% CPU threshold has been exceeded or during the period that the application is commonly used a lot more. Scaling down works the same way and all this can be configured through a simple yaml file.\"])), (_l()(), i0.Éµeld(8, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"So what does this have to do with the DevOps environment? In many older DevOps systems, it is common to not only backup essential company assets (such as deployed artifacts to Nexus/Artifactory/...), but the whole DevOps environment as well. This makes sense since a sudden loss of these tools will severely cripple the development and release process. This in turn will cost the company a lot. But we only know that these backups work on the configuration of that machine. We aren't guaranteed that the backups will work immediately if restored on another machine unless special care is taken that it is an exact duplicate (this is harder than it sounds!).\"])), (_l()(), i0.Éµeld(10, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"If instead we use Docker images, then we can put the configurations as Dockerfiles into a version control system such as git. The benefits are known to all: it is easy to rollback to a prior setting if a new implementation is causing issues which can't be immediately resolved. Docker images can be pulled into any system and will function the same.\"])), (_l()(), i0.Éµeld(12, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Orchestrate with Docker Compose\"])), (_l()(), i0.Éµeld(14, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"In this section I will show how the DevOps environment can be setup with Docker. I use Docker Compose to orchestrate the different containers. \"])), (_l()(), i0.Éµeld(16, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"I should note that I had started out using Windows as my DevOps machine (against my better judgement). Windows has provided big leaps in support for Docker and Linux commands through the WSL2 implementation of Docker Desktop, but there are still some important features missing. I found myself working around the limitations of Windows quite often before I eventually admitted defeat and switched over to a Linux host. This immediately proved my setup to be working though, since all I had to do was checkout my DevOps git repository (and copy my passwords/credentials that I don't check into git obviously) and run \"])), (_l()(), i0.Éµeld(18, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"docker compose up\"])), (_l()(), i0.Éµted(-1, null, [\"!\"])), (_l()(), i0.Éµeld(21, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Here is an example \"])), (_l()(), i0.Éµeld(23, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"docker-compose.yml\"])), (_l()(), i0.Éµted(-1, null, [\" that I use to setup a Nexus, Jenkins and Nginx container.\"])), (_l()(), i0.Éµeld(26, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(27, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(28, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(29, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(31, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"There are not as many things going on as it would seem at first glance. The Docker image is defined, either from a local Dockerfile or an external image on Dockerhub. Then there are the ports, volumes and secrets/credentials.\"])), (_l()(), i0.Éµeld(33, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The ports are easy to explain. Jenkins and Nexus are configured to \"])), (_l()(), i0.Éµeld(35, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"expose\"])), (_l()(), i0.Éµted(-1, null, [\" their HTTP ports. Expose means that the docker containers have their ports made accessible to the Docker network, but not to the host. In this setup we do not want to access these containers through localhost directly. Instead Nginx will port forward its HTTP and HTTPS ports to the hosts' localhost. This is also the reason why HTTPS is not necessary for Jenkins and Nexus. Everything passes through Nginx, so we only need to ensure that those incoming urls are encrypted.\"])), (_l()(), i0.Éµeld(38, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The volumes are quite self-explanatory. We map the data to/from the host to persist container data beyond the containers' lifespan. The main thing of note is perhaps \"])), (_l()(), i0.Éµeld(40, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"/var/run/docker.sock:/var/run/docker.sock\"])), (_l()(), i0.Éµted(-1, null, [\". This is required to make Docker available within the Jenkins container to run Docker agents within Jenkins pipelines. It will use the host Docker daemon within the container, so any images pulled within the container will be available from the host as well. This proves useful since images do not need to be pulled again each time the container is restarted.\"])), (_l()(), i0.Éµeld(43, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Finally, credentials of any kinds should not be hardcoded into these configuration files and definitely not checked into git. For that, you can use \"])), (_l()(), i0.Éµeld(45, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"env_file\"])), (_l()(), i0.Éµted(-1, null, [\" to provide a file with environment properties (often passwords). There's another mechanism I use to retrieve a private SSH key: Docker secrets. The contents of such a key is much larger than that of a normal password, so I prefer to keep them in a separate file. In the above example, the private SSH key is stored in a file named \"])), (_l()(), i0.Éµeld(48, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"bitbucketSshKey\"])), (_l()(), i0.Éµted(-1, null, [\". You can access them in the Docker container in the following way:\"])), (_l()(), i0.Éµeld(51, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(52, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(53, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(54, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(56, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Nginx\"])), (_l()(), i0.Éµeld(58, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The setup for Nginx is quite straight-forward. The volume I mapped for the \"])), (_l()(), i0.Éµeld(60, 0, null, null, 1, \"b\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"site_content\"])), (_l()(), i0.Éµted(-1, null, [\" is merely a directory with html pages to display 200 OK and unhappy path messages. More interesting is the \"])), (_l()(), i0.Éµeld(63, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"nginx.conf\"])), (_l()(), i0.Éµted(-1, null, [\".\"])), (_l()(), i0.Éµeld(66, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(67, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(68, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(69, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(71, 0, null, 0, 10, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Given this setup the applications can be accessed through \"])), (_l()(), i0.Éµeld(73, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"http://[app].homenetwork.dns\"])), (_l()(), i0.Éµted(-1, null, [\", such as \"])), (_l()(), i0.Éµeld(76, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"http://jenkins.homenetwork.dns\"])), (_l()(), i0.Éµted(-1, null, [\". In this example Nginx is configured with HTTP, but it is easily converted to use HTTPS (and it should!). The Jenkins and Nexus containers are available through their container names. All client computers need to configure their \"])), (_l()(), i0.Éµeld(79, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"hosts\"])), (_l()(), i0.Éµted(-1, null, [\" file to map these addresses to the IP of the host of these containers. The host computer itself simply maps to localhost of course.\"])), (_l()(), i0.Éµeld(82, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(83, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(84, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(85, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(87, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Jenkins\"])), (_l()(), i0.Éµeld(89, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"In this section I will show how to setup a completely initialized Jenkins environment with users, credentials, pipelines, global settings, etc without having to setup any of these manually! That means everything is available if you were to run it on a new machine. This follows the principle of \"])), (_l()(), i0.Éµeld(91, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"code as configuration\"])), (_l()(), i0.Éµted(-1, null, [\". \"])), (_l()(), i0.Éµeld(94, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The setup here was a bit more complicated and admittedly took much more time than if I hadsimply installed Jenkins. This is partially due to a low number of working examples at this time of writing. But we are looking for long term gains! And this is simply fun and useful to have once you got it working.\"])), (_l()(), i0.Éµeld(96, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Let's start with the Dockerfile:\"])), (_l()(), i0.Éµeld(98, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(99, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(100, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(101, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(103, 0, null, 0, 12, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"This Dockerfile does a bunch of things. First it disables the setup wizard, because we are going to automate everything. A \"])), (_l()(), i0.Éµeld(105, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"locale.xml\"])), (_l()(), i0.Éµted(-1, null, [\" is copied over to set the system language and a list of plugins gets moved to \"])), (_l()(), i0.Éµeld(108, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"/usr/share/jenkins/ref/*\"])), (_l()(), i0.Éµted(-1, null, [\". These plugins will be installed on initialization of the Jenkins container. Note that the files under \"])), (_l()(), i0.Éµeld(111, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"/usr/share/jenkins/ref/*\"])), (_l()(), i0.Éµeld(113, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/jenkinsci/docker/blob/master/README.md\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\" will automatically be picked up by the plugins to be initialized\"])), (_l()(), i0.Éµted(-1, null, [\".\"])), (_l()(), i0.Éµeld(116, 0, null, 0, 10, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Next, \"])), (_l()(), i0.Éµeld(118, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"casc.yaml\"])), (_l()(), i0.Éµted(-1, null, [\" is copied over to the container. It is easier to simply \"])), (_l()(), i0.Éµeld(121, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/README.md\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"link you to the JCasC plugin\"])), (_l()(), i0.Éµted(-1, null, [\", but to explain it in a nutshell: this is the plugin that handles the automatic configuration of users, credentials and more. Describe what you want in the yaml file and it will be added during initialization. An example of such a \"])), (_l()(), i0.Éµeld(124, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"casc.yaml\"])), (_l()(), i0.Éµted(-1, null, [\" looks like this:\"])), (_l()(), i0.Éµeld(127, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(128, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(129, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(130, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(132, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Remember the \"])), (_l()(), i0.Éµeld(134, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"env.file\"])), (_l()(), i0.Éµted(-1, null, [\" and Docker secret we added in the \"])), (_l()(), i0.Éµeld(137, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"docker-compose.yml\"])), (_l()(), i0.Éµted(-1, null, [\"? Here they get accessed to fill in the correct credentials! The following are added in this example alone: two users, a global SSH credential and maven settings (ie. for download/upload to Nexus). Note: a few more things will need to be added to satisfy Jenkins' security issues, but I am keeping this compact for tutorial purposes.\"])), (_l()(), i0.Éµeld(140, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"To quickly go over the remaining items in the Dockerfile:\"])), (_l()(), i0.Éµeld(142, 0, null, 0, 21, \"ul\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(143, 0, null, null, 9, \"li\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(144, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"mavenSettings.xml\"])), (_l()(), i0.Éµted(-1, null, [\": We have already seen this being used in \"])), (_l()(), i0.Éµeld(147, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"casc.yaml\"])), (_l()(), i0.Éµted(-1, null, [\". Just make sure you don't put hardcoded credentials in the maven settings! It can access the environment properties from \"])), (_l()(), i0.Éµeld(150, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"env.file\"])), (_l()(), i0.Éµted(-1, null, [\". \"])), (_l()(), i0.Éµeld(153, 0, null, null, 3, \"li\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(154, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"jobs/project_seed/config.xml\"])), (_l()(), i0.Éµted(-1, null, [\": Creates a job that is intended to be used to spawn a project folder with predefined pipelines. \"])), (_l()(), i0.Éµeld(157, 0, null, null, 6, \"li\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(158, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"pipelines/*\"])), (_l()(), i0.Éµted(-1, null, [\": This directory contains the pipelines that are referenced by the seed job (which was spawned by the \"])), (_l()(), i0.Éµeld(161, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"config.xml\"])), (_l()(), i0.Éµted(-1, null, [\"). \"])), (_l()(), i0.Éµeld(164, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Any jobs that are added manually afterwards are persisted on the host on volume \"])), (_l()(), i0.Éµeld(166, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"jenkinsdata\"])), (_l()(), i0.Éµted(-1, null, [\". Schedule regular backups of those jobs (in the \"])), (_l()(), i0.Éµeld(169, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"job/\"])), (_l()(), i0.Éµted(-1, null, [\" directory) if it is crucial that they are kept.\"])), (_l()(), i0.Éµeld(172, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Nexus\"])), (_l()(), i0.Éµeld(174, 0, null, 0, 9, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(175, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/AdaptiveConsulting/nexus-casc-plugin\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Nexus has similar options as Jenkins, but it still seems to be in development.\"])), (_l()(), i0.Éµted(-1, null, [\" For this, there is a secondary approach that requires slightly more work. Nexus offers scripts that you can send through REST calls. \"])), (_l()(), i0.Éµeld(178, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/sonatype-nexus-community/nexus-scripting-examples\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The examples on Nexus\"])), (_l()(), i0.Éµted(-1, null, [\" are good enough to start from and modify as you see fit. In the Dockerfile, copy \"])), (_l()(), i0.Éµeld(181, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"nexus.properties\"])), (_l()(), i0.Éµted(-1, null, [\" to the container to enable scripting first:\"])), (_l()(), i0.Éµeld(184, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(185, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(186, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(187, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(189, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(190, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(191, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(192, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(194, 0, null, 0, 10, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Execute the \"])), (_l()(), i0.Éµeld(196, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"provision.sh\"])), (_l()(), i0.Éµted(-1, null, [\" script to carry out all the POST commands that you added. Then as a security step, enter the Nexus container (\"])), (_l()(), i0.Éµeld(199, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"docker exec -u 0 -it nexus bash\"])), (_l()(), i0.Éµted(-1, null, [\") and edit \"])), (_l()(), i0.Éµeld(202, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"/nexus-data/etc/nexus.properties\"])), (_l()(), i0.Éµted(-1, null, [\":\"])), (_l()(), i0.Éµeld(205, 0, null, 0, 4, \"pre\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(206, 0, null, null, 3, \"code\", [], [[2, \"hljs\", null]], null, null, null, null)), i0.Éµdid(207, 540672, null, 0, i4.Highlight, [i0.ElementRef, i4.HighlightJS, [2, i4.HIGHLIGHT_OPTIONS]], { code: [0, \"code\"], languages: [1, \"languages\"] }, null), i0.Éµpad(208, 1), (_l()(), i0.Éµted(-1, null, [\"\\n    \"])), (_l()(), i0.Éµeld(210, 0, null, 0, 1, \"h3\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Conclusion\"])), (_l()(), i0.Éµeld(212, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"In this setup we have seen how to predefine all the configuration we need that we would normally do manually (clicking through the GUI). By automating it we can simply run \"])), (_l()(), i0.Éµeld(214, 0, null, null, 1, \"code\", [[\"class\", \"github-code\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"docker-compose up\"])), (_l()(), i0.Éµted(-1, null, [\" and everything will be there! This is especially useful if you are in a situation where you have to reconfigure these settings over and over. The downside is that the configuration will likely take longer than a manual setup. Since I am developing by myself, this was a huge overkill for me. But I learned from my mistakes and enjoyed setting it up. I am rest assured that if I need to setup my DevOps environment on a new machine, everything will still be tailored to my needs out of the box!\"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.postTitle(); var currVal_1 = _co.postDate(); var currVal_2 = _co.postAbstract(); _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2); var currVal_4 = \"version: '3.7'\\nservices:\\n  nexus:\\n    build: ./nexus/.\\n    image: bytepact/nexus\\n    container_name: nexus\\n    expose:\\n      - 8081\\n    volumes:\\n      - nexusdata:/nexus-data\\n    networks:\\n      - devops-network\\n  jenkins:\\n    build: ./jenkins/.\\n    image: bytepact/jenkins\\n    container_name: jenkins\\n    env_file:\\n      - jenkins/secrets/user-credentials.env\\n    secrets:\\n      - bitbucketSshKey\\n    expose:\\n      - 8080\\n    depends_on:\\n      - nexus\\n    volumes:\\n      - jenkinsdata:/var/jenkins_home\\n      - /var/run/docker.sock:/var/run/docker.sock\\n    networks:\\n      - devops-network\\n  nginx:\\n    image: nginx:1.19.5\\n    container_name: nginx\\n    ports:\\n      - 80:80\\n      - 443:443\\n    depends_on:\\n      - nexus\\n      - jenkins\\n    volumes:\\n      - ./nginx/site_content:/usr/share/nginx/html\\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\\n    networks:\\n      - devops-network\\nvolumes:\\n  nexusdata:\\n  jenkinsdata:\\nsecrets:\\n  bitbucketSshKey:\\n    file: ./jenkins/secrets/bitbucket/ssh_private_key\\nnetworks:\\n  devops-network:\"; var currVal_5 = _ck(_v, 29, 0, \"yaml\"); _ck(_v, 28, 0, currVal_4, currVal_5); var currVal_7 = \"docker exec -it jenkins cat /run/secrets/bitbucketSshKey\"; var currVal_8 = _ck(_v, 54, 0, \"yaml\"); _ck(_v, 53, 0, currVal_7, currVal_8); var currVal_10 = \"// worker configuration\\n\\nhttp {\\n    upstream docker-jenkins {\\n        server jenkins:8080;\\n    }\\n    upstream docker-nexus {\\n        server nexus:8081;\\n    }\\n\\n    // proxy headers\\n\\n    server {\\n        listen       80;\\n        server_name  global.dns nginx.global.dns;\\n\\n        location / {\\n            root   /usr/share/nginx/html;\\n            index  index.html index.htm;\\n        }\\n\\n        error_page   500 502 503 504  /50x.html;\\n        location = /50x.html {\\n            root   /usr/share/nginx/html;\\n        }\\n    }\\n\\n    server {\\n        server_name  jenkins.homenetwork.dns;\\n\\n        location / {\\n            proxy_pass http://docker-jenkins;\\n        }\\n    }\\n\\n    server {\\n        server_name  nexus.homenetwork.dns;\\n\\n        location / {\\n            proxy_pass http://docker-nexus;\\n        }\\n    }\\n}\"; var currVal_11 = _ck(_v, 69, 0, \"text\"); _ck(_v, 68, 0, currVal_10, currVal_11); var currVal_13 = \"127.0.0.1 nginx.homenetwork.dns\\n127.0.0.1 jenkins.homenetwork.dns\\n127.0.0.1 nexus.homenetwork.dns\"; var currVal_14 = _ck(_v, 85, 0, \"text\"); _ck(_v, 84, 0, currVal_13, currVal_14); var currVal_16 = \"FROM jenkins/jenkins:2.263.1-lts-jdk11\\nMAINTAINER me@example.com\\n\\nUSER root\\n# Install the stuff you need\\n\\nUSER jenkins\\n\\n# Skip initial setup\\nENV JAVA_OPTS -Djenkins.install.runSetupWizard=false\\nENV CASC_JENKINS_CONFIG /var/jenkins_home/userContent/casc.yaml\\n\\nCOPY config/locale.xml /var/jenkins_home/locale.xml\\nCOPY config/plugins.txt /usr/share/jenkins/ref/plugins.txt\\nRUN jenkins-plugin-cli -f /usr/share/jenkins/ref/plugins.txt\\nCOPY config/casc.yaml /var/jenkins_home/userContent/casc.yaml\\nCOPY config/mavenSettings.xml /var/jenkins_home/userContent/settings.xml\\nCOPY jobs/project_seed/config.xml /usr/share/jenkins/ref/jobs/project_seed/config.xml\\nADD pipelines /usr/share/jenkins/ref/jobs/project_seed/workspace/\"; var currVal_17 = _ck(_v, 101, 0, \"text\"); _ck(_v, 100, 0, currVal_16, currVal_17); var currVal_19 = \"jenkins:\\n  securityRealm:\\n    local:\\n      allowsSignup: false\\n      users:\\n        - id: admin\\n          password: ${JENKINS_ADMIN_PASSWORD}\\n        - id: git\\n          password: ${JENKINS_GIT_PASSWORD}\\ncredentials:\\n  system:\\n    domainCredentials:\\n      - credentials:\\n          - basicSSHUserPrivateKey:\\n              id: 'unique_id'\\n              scope: USER\\n              username: Jenkins\\n              description: 'Bitbucket SSH key'\\n              passphrase: ${BITBUCKET_SSH_PASSPHRASE}\\n              privateKeySource:\\n                directEntry:\\n                  privateKey: ${readFile:/run/secrets/bitbucketSshKey}\\nunclassified:\\n  globalConfigFiles:\\n    configs:\\n      - globalMavenSettings:\\n          id: 'unique_id'\\n          content: ${readFile:/var/jenkins_home/userContent/settings.xml}\"; var currVal_20 = _ck(_v, 130, 0, \"text\"); _ck(_v, 129, 0, currVal_19, currVal_20); var currVal_22 = \"// Dockerfile\\n...\\nCOPY config/nexus.properties nexus-data/etc/nexus.properties\"; var currVal_23 = _ck(_v, 187, 0, \"text\"); _ck(_v, 186, 0, currVal_22, currVal_23); var currVal_25 = \"// nexus.properties\\nnexus.scripts.allowCreation=true\"; var currVal_26 = _ck(_v, 192, 0, \"text\"); _ck(_v, 191, 0, currVal_25, currVal_26); var currVal_28 = \"nexus.scripts.allowCreation=false\"; var currVal_29 = _ck(_v, 208, 0, \"text\"); _ck(_v, 207, 0, currVal_28, currVal_29); }, function (_ck, _v) { var currVal_3 = true; _ck(_v, 27, 0, currVal_3); var currVal_6 = true; _ck(_v, 52, 0, currVal_6); var currVal_9 = true; _ck(_v, 67, 0, currVal_9); var currVal_12 = true; _ck(_v, 83, 0, currVal_12); var currVal_15 = true; _ck(_v, 99, 0, currVal_15); var currVal_18 = true; _ck(_v, 128, 0, currVal_18); var currVal_21 = true; _ck(_v, 185, 0, currVal_21); var currVal_24 = true; _ck(_v, 190, 0, currVal_24); var currVal_27 = true; _ck(_v, 206, 0, currVal_27); }); }\nexport function View_AutomatedDevopsComponent_Host_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 1, \"app-automated-devops\", [], null, null, null, View_AutomatedDevopsComponent_0, RenderType_AutomatedDevopsComponent)), i0.Éµdid(1, 49152, null, 0, i5.AutomatedDevopsComponent, [], null, null)], null, null); }\nvar AutomatedDevopsComponentNgFactory = i0.Éµccf(\"app-automated-devops\", i5.AutomatedDevopsComponent, View_AutomatedDevopsComponent_Host_0, {}, {}, []);\nexport { AutomatedDevopsComponentNgFactory as AutomatedDevopsComponentNgFactory };\n","<app-blog-post\r\n    [postTitle]=\"postTitle()\"\r\n    [postDate]=\"postDate()\"\r\n    [postAbstract]=\"postAbstract()\">\r\n\r\n    <h3>Why use Docker?</h3>\r\n\r\n    <p>In today's world more and more applications become Dockerized, thanks to its ability to\r\n        provide consistent behavior across multiple platforms. That means if you deploy a Docker image with version\r\n        1.0.0 on your test environment, then you are sure that it will behave exactly the same on acceptance and\r\n        production! Anyone who has dealt with platform-specific issues due to minuscule differences, which are often\r\n        difficult to debug, can testify what a blessing this is.</p>\r\n\r\n    <p>Furthermore, Docker in combination with Kubernetes (and any of its offspring such as Openshift) allows for easy\r\n        scaling. There are settings available for automated scaling based on current needs or expected peaks. For\r\n        example, scale up extra Docker containers when >80% CPU threshold has been exceeded or during the period that\r\n        the application is commonly used a lot more. Scaling down works the same way and all this can be configured\r\n        through a simple yaml file.</p>\r\n\r\n    <p>So what does this have to do with the DevOps environment? In many older DevOps systems, it is common to not only\r\n        backup essential company assets (such as deployed artifacts to Nexus/Artifactory/...), but the whole DevOps\r\n        environment as well. This makes sense since a sudden loss of these tools will severely cripple the development\r\n        and release process. This in turn will cost the company a lot. But we only know that these backups work on the\r\n        configuration of that machine. We aren't guaranteed that the backups will work immediately if restored on\r\n        another machine unless special care is taken that it is an exact duplicate (this is harder than it sounds!).</p>\r\n\r\n    <p>If instead we use Docker images, then we can put the configurations as Dockerfiles\r\n        into a version control system such as git. The benefits are known to all: it is easy to rollback\r\n        to a prior setting if a new implementation is causing issues which can't be immediately resolved. Docker images\r\n        can be pulled into any system and will function the same.</p>\r\n\r\n    <h3>Orchestrate with Docker Compose</h3>\r\n\r\n    <p>In this section I will show how the DevOps environment can be setup with Docker. I use Docker Compose to\r\n        orchestrate the different containers. </p>\r\n\r\n    <p>I should note that I had started out using Windows as my DevOps machine (against my better judgement).\r\n        Windows has provided big leaps in support for Docker and Linux commands through the WSL2 implementation of\r\n        Docker Desktop, but there are still some important features missing. I found myself working around the\r\n        limitations of Windows quite often before I eventually admitted defeat and switched over to a Linux host. This\r\n        immediately proved my setup to be working though, since all I had to do was checkout my DevOps git repository\r\n        (and copy my passwords/credentials that I don't check into git obviously)\r\n        and run <code class=\"github-code\">docker compose up</code>!</p>\r\n\r\n    <p>Here is an example <code class=\"github-code\">docker-compose.yml</code> that I use to setup a Nexus, Jenkins and\r\n        Nginx container.</p>\r\n\r\n    <pre><code [languages]=\"['yaml']\" [highlight]=\"'version: \\'3.7\\'\r\nservices:\r\n  nexus:\r\n    build: ./nexus/.\r\n    image: bytepact/nexus\r\n    container_name: nexus\r\n    expose:\r\n      - 8081\r\n    volumes:\r\n      - nexusdata:/nexus-data\r\n    networks:\r\n      - devops-network\r\n  jenkins:\r\n    build: ./jenkins/.\r\n    image: bytepact/jenkins\r\n    container_name: jenkins\r\n    env_file:\r\n      - jenkins/secrets/user-credentials.env\r\n    secrets:\r\n      - bitbucketSshKey\r\n    expose:\r\n      - 8080\r\n    depends_on:\r\n      - nexus\r\n    volumes:\r\n      - jenkinsdata:/var/jenkins_home\r\n      - /var/run/docker.sock:/var/run/docker.sock\r\n    networks:\r\n      - devops-network\r\n  nginx:\r\n    image: nginx:1.19.5\r\n    container_name: nginx\r\n    ports:\r\n      - 80:80\r\n      - 443:443\r\n    depends_on:\r\n      - nexus\r\n      - jenkins\r\n    volumes:\r\n      - ./nginx/site_content:/usr/share/nginx/html\r\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\r\n    networks:\r\n      - devops-network\r\nvolumes:\r\n  nexusdata:\r\n  jenkinsdata:\r\nsecrets:\r\n  bitbucketSshKey:\r\n    file: ./jenkins/secrets/bitbucket/ssh_private_key\r\nnetworks:\r\n  devops-network:'\">\r\n    </code></pre>\r\n\r\n    <p>There are not as many things going on as it would seem at first glance. The Docker image is defined, either from\r\n        a local Dockerfile or an external image on Dockerhub. Then there are the ports, volumes and\r\n        secrets/credentials.</p>\r\n\r\n    <p>The ports are easy to explain. Jenkins and Nexus are configured to <b>expose</b> their HTTP ports. Expose means\r\n        that the docker containers have their ports made accessible to the Docker network, but not to the host. In this\r\n        setup we do not want to access these containers through localhost directly. Instead Nginx will port forward its\r\n        HTTP and HTTPS ports to the hosts' localhost. This is also the reason why HTTPS is not necessary for Jenkins and\r\n        Nexus. Everything passes through Nginx, so we only need to ensure that those incoming urls are encrypted.</p>\r\n\r\n    <p>The volumes are quite self-explanatory. We map the data to/from the host to persist container data beyond the\r\n        containers' lifespan. The main thing of note is perhaps\r\n        <code class=\"github-code\">/var/run/docker.sock:/var/run/docker.sock</code>. This is required to make Docker\r\n        available within the Jenkins container to run Docker agents within Jenkins pipelines. It will use the host\r\n        Docker daemon within the container, so any images pulled within the container will be available from the host as\r\n        well. This proves useful since images do not need to be pulled again each time the container is restarted.</p>\r\n\r\n    <p>Finally, credentials of any kinds should not be hardcoded into these configuration files and definitely not\r\n        checked into git. For that, you can use <code class=\"github-code\">env_file</code> to provide a file with\r\n        environment properties (often passwords). There's another mechanism I use to retrieve a private SSH key: Docker\r\n        secrets. The contents of such a key is much larger than that of a normal password, so I prefer to keep them in a\r\n        separate file. In the above example, the private SSH key is stored in a file named <i>bitbucketSshKey</i>. You\r\n        can access them in the Docker container in the following way:</p>\r\n\r\n    <pre><code [languages]=\"['yaml']\" [highlight]=\"'docker exec -it jenkins cat /run/secrets/bitbucketSshKey'\">\r\n    </code></pre>\r\n\r\n    <h3>Nginx</h3>\r\n\r\n    <p>The setup for Nginx is quite straight-forward. The volume I mapped for the <b>site_content</b> is merely a\r\n        directory with html pages to display 200 OK and unhappy path messages. More interesting is the <code\r\n            class=\"github-code\">nginx.conf</code>.</p>\r\n\r\n    <pre><code [languages]=\"['text']\" [highlight]=\"'// worker configuration\r\n\r\nhttp {\r\n    upstream docker-jenkins {\r\n        server jenkins:8080;\r\n    }\r\n    upstream docker-nexus {\r\n        server nexus:8081;\r\n    }\r\n\r\n    // proxy headers\r\n\r\n    server {\r\n        listen       80;\r\n        server_name  global.dns nginx.global.dns;\r\n\r\n        location / {\r\n            root   /usr/share/nginx/html;\r\n            index  index.html index.htm;\r\n        }\r\n\r\n        error_page   500 502 503 504  /50x.html;\r\n        location = /50x.html {\r\n            root   /usr/share/nginx/html;\r\n        }\r\n    }\r\n\r\n    server {\r\n        server_name  jenkins.homenetwork.dns;\r\n\r\n        location / {\r\n            proxy_pass http://docker-jenkins;\r\n        }\r\n    }\r\n\r\n    server {\r\n        server_name  nexus.homenetwork.dns;\r\n\r\n        location / {\r\n            proxy_pass http://docker-nexus;\r\n        }\r\n    }\r\n}'\">\r\n    </code></pre>\r\n\r\n    <p>Given this setup the applications can be accessed through <code\r\n        class=\"github-code\">http://[app].homenetwork.dns</code>, such as <code class=\"github-code\">http://jenkins.homenetwork.dns</code>.\r\n        In this example Nginx is configured with HTTP, but it is easily converted to use HTTPS (and it should!). The\r\n        Jenkins and Nexus containers are available through their container names. All client computers need to configure\r\n        their <code class=\"github-code\">hosts</code> file to map these addresses to the IP of the host of these\r\n        containers. The host computer itself simply maps to localhost of course.</p>\r\n\r\n    <pre><code [languages]=\"['text']\" [highlight]=\"'127.0.0.1 nginx.homenetwork.dns\r\n127.0.0.1 jenkins.homenetwork.dns\r\n127.0.0.1 nexus.homenetwork.dns'\">\r\n    </code></pre>\r\n\r\n    <h3>Jenkins</h3>\r\n\r\n    <p>In this section I will show how to setup a completely initialized Jenkins environment with users, credentials,\r\n        pipelines, global settings, etc without having to setup any of these manually! That means everything is\r\n        available if you were to run it on a new machine. This follows the principle of <i>code as configuration</i>.\r\n    </p>\r\n\r\n    <p>The setup here was a bit more complicated and admittedly took much more time than if I hadsimply installed\r\n        Jenkins. This is partially due to a low number of working examples at this time of writing.\r\n        But we are looking for long term gains! And this is simply fun and useful to have once you got it working.</p>\r\n\r\n    <p>Let's start with the Dockerfile:</p>\r\n\r\n    <pre><code [languages]=\"['text']\" [highlight]=\"'FROM jenkins/jenkins:2.263.1-lts-jdk11\r\nMAINTAINER me@example.com\r\n\r\nUSER root\r\n# Install the stuff you need\r\n\r\nUSER jenkins\r\n\r\n# Skip initial setup\r\nENV JAVA_OPTS -Djenkins.install.runSetupWizard=false\r\nENV CASC_JENKINS_CONFIG /var/jenkins_home/userContent/casc.yaml\r\n\r\nCOPY config/locale.xml /var/jenkins_home/locale.xml\r\nCOPY config/plugins.txt /usr/share/jenkins/ref/plugins.txt\r\nRUN jenkins-plugin-cli -f /usr/share/jenkins/ref/plugins.txt\r\nCOPY config/casc.yaml /var/jenkins_home/userContent/casc.yaml\r\nCOPY config/mavenSettings.xml /var/jenkins_home/userContent/settings.xml\r\nCOPY jobs/project_seed/config.xml /usr/share/jenkins/ref/jobs/project_seed/config.xml\r\nADD pipelines /usr/share/jenkins/ref/jobs/project_seed/workspace/'\">\r\n    </code></pre>\r\n\r\n    <p>This Dockerfile does a bunch of things. First it disables the setup wizard, because we are going to automate\r\n        everything. A <code class=\"github-code\">locale.xml</code> is copied over to set the system language and a list\r\n        of plugins gets moved to <code class=\"github-code\">/usr/share/jenkins/ref/*</code>. These plugins will be\r\n        installed on initialization of the Jenkins container. Note that the files under <code class=\"github-code\">/usr/share/jenkins/ref/*</code>\r\n        <a href=\"https://github.com/jenkinsci/docker/blob/master/README.md\"> will automatically be picked up by the\r\n            plugins to be initialized</a>.</p>\r\n\r\n    <p>Next, <code class=\"github-code\">casc.yaml</code> is copied over to the container. It is easier to simply\r\n        <a href=\"https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/README.md\">link you to the JCasC\r\n            plugin</a>, but to explain it in a nutshell: this is the plugin that handles the automatic configuration of\r\n        users, credentials and more. Describe what you want in the yaml file and it will be added during initialization.\r\n        An example of such a <code class=\"github-code\">casc.yaml</code> looks like this:</p>\r\n\r\n    <pre><code [languages]=\"['text']\" [highlight]=\"'jenkins:\r\n  securityRealm:\r\n    local:\r\n      allowsSignup: false\r\n      users:\r\n        - id: admin\r\n          password: ${JENKINS_ADMIN_PASSWORD}\r\n        - id: git\r\n          password: ${JENKINS_GIT_PASSWORD}\r\ncredentials:\r\n  system:\r\n    domainCredentials:\r\n      - credentials:\r\n          - basicSSHUserPrivateKey:\r\n              id: \\'unique_id\\'\r\n              scope: USER\r\n              username: Jenkins\r\n              description: \\'Bitbucket SSH key\\'\r\n              passphrase: ${BITBUCKET_SSH_PASSPHRASE}\r\n              privateKeySource:\r\n                directEntry:\r\n                  privateKey: ${readFile:/run/secrets/bitbucketSshKey}\r\nunclassified:\r\n  globalConfigFiles:\r\n    configs:\r\n      - globalMavenSettings:\r\n          id: \\'unique_id\\'\r\n          content: ${readFile:/var/jenkins_home/userContent/settings.xml}'\">\r\n    </code></pre>\r\n\r\n    <p>Remember the <code class=\"github-code\">env.file</code> and Docker secret we added in the <code\r\n        class=\"github-code\">docker-compose.yml</code>? Here they get accessed to fill in the correct credentials! The\r\n        following are added in this example alone: two users, a global SSH credential and maven settings (ie. for\r\n        download/upload to Nexus). Note: a few more things will need to be added to satisfy Jenkins' security issues,\r\n        but I am keeping this compact for tutorial purposes.</p>\r\n\r\n    <p>To quickly go over the remaining items in the Dockerfile:</p>\r\n    <ul>\r\n        <li><code class=\"github-code\">mavenSettings.xml</code>: We have already seen this being used in <code\r\n            class=\"github-code\">casc.yaml</code>. Just make sure you don't put hardcoded credentials in the maven\r\n            settings! It can access the environment properties from <code class=\"github-code\">env.file</code>.\r\n        </li>\r\n        <li><code class=\"github-code\">jobs/project_seed/config.xml</code>: Creates a job that is intended to be used to\r\n            spawn a project folder with predefined pipelines.\r\n        </li>\r\n        <li><code class=\"github-code\">pipelines/*</code>: This directory contains the pipelines that are referenced by\r\n            the seed job (which was spawned by the <code class=\"github-code\">config.xml</code>).\r\n        </li>\r\n    </ul>\r\n\r\n    <p>Any jobs that are added manually afterwards are persisted on the host on volume <code class=\"github-code\">jenkinsdata</code>.\r\n        Schedule regular backups of those jobs (in the <code class=\"github-code\">job/</code> directory) if it is crucial\r\n        that they are kept.</p>\r\n\r\n    <h3>Nexus</h3>\r\n\r\n    <p><a href=\"https://github.com/AdaptiveConsulting/nexus-casc-plugin\">Nexus has similar options as Jenkins, but it\r\n        still seems to be in development.</a> For this, there is a secondary approach that requires slightly more work.\r\n        Nexus offers scripts that you can send through REST calls.\r\n        <a href=\"https://github.com/sonatype-nexus-community/nexus-scripting-examples\">The examples on Nexus</a> are\r\n        good enough to start from and modify as you see fit. In the Dockerfile, copy <code class=\"github-code\">nexus.properties</code>\r\n        to the container to enable scripting first:</p>\r\n\r\n    <pre><code [languages]=\"['text']\" [highlight]=\"'// Dockerfile\r\n...\r\nCOPY config/nexus.properties nexus-data/etc/nexus.properties'\">\r\n    </code></pre>\r\n\r\n    <pre><code [languages]=\"['text']\" [highlight]=\"'// nexus.properties\r\nnexus.scripts.allowCreation=true'\">\r\n    </code></pre>\r\n\r\n    <p>Execute the <code class=\"github-code\">provision.sh</code> script to carry out all the POST commands that you\r\n        added. Then as a security step, enter the Nexus container (<code class=\"github-code\">docker exec -u 0 -it nexus\r\n            bash</code>) and edit <code class=\"github-code\">/nexus-data/etc/nexus.properties</code>:</p>\r\n\r\n    <pre><code [languages]=\"['text']\" [highlight]=\"'nexus.scripts.allowCreation=false'\">\r\n    </code></pre>\r\n\r\n    <h3>Conclusion</h3>\r\n\r\n    <p>In this setup we have seen how to predefine all the configuration we need that we would normally do manually\r\n        (clicking through the GUI). By automating it we can simply run <code class=\"github-code\">docker-compose\r\n            up</code> and everything will be there! This is especially useful if you are in a situation where you have\r\n        to reconfigure these settings over and over. The downside is that the configuration will likely take longer than\r\n        a manual setup. Since I am developing by myself, this was a huge overkill for me. But I learned from my mistakes\r\n        and enjoyed setting it up. I am rest assured that if I need to setup my DevOps environment on a new machine,\r\n        everything will still be tailored to my needs out of the box!</p>\r\n</app-blog-post>\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../../shared/blog-post/blog-post.component.ngfactory\";\nimport * as i2 from \"../../../../../shared/blog-post/blog-post.component\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"./chinese-ocr-tool.component\";\nvar styles_ChineseOcrToolComponent = [];\nvar RenderType_ChineseOcrToolComponent = i0.Éµcrt({ encapsulation: 2, styles: styles_ChineseOcrToolComponent, data: {} });\nexport { RenderType_ChineseOcrToolComponent as RenderType_ChineseOcrToolComponent };\nexport function View_ChineseOcrToolComponent_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 75, \"app-blog-post\", [], null, null, null, i1.View_BlogPostComponent_0, i1.RenderType_BlogPostComponent)), i0.Éµdid(1, 49152, null, 0, i2.BlogPostComponent, [i3.DOCUMENT], { postTitle: [0, \"postTitle\"], postDate: [1, \"postDate\"], postAbstract: [2, \"postAbstract\"] }, null), (_l()(), i0.Éµeld(2, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The world of AI and image-based text recognition, or optical character recognition (OCR), is evolving quickly the past decades. There are quite a few tools around that can scan images in many languages quite reliably for English and other alphabet-like systems. It can often deal with certain levels of blur, background noise, rotation and other mechanics that may interfere with interpreting the characters.\"])), (_l()(), i0.Éµeld(4, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The quickly evolving power of hardware has no doubt contributed a lot. Better GPU's and more data sets allow more accurate models to be trained. The rising computational power of the average end user allows results to be gathered more quickly at runtime, which is necessary to create a feasible product.\"])), (_l()(), i0.Éµeld(6, 0, null, 0, 11, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"I was inspired to develop a tool to detect Chinese characters from images. I am learning Chinese and have a blog section dedicated to this, but I am improving at a slow pace due to the hassle of having to look up so many characters. My aim as a developer is to simplify this manual labor and replace it with a tool that \"])), (_l()(), i0.Éµeld(8, 0, null, null, 1, \"del\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"can do the work for me\"])), (_l()(), i0.Éµted(-1, null, [\" offers a guiding hand. Ideally, it would help me play the game \"])), (_l()(), i0.Éµeld(11, 0, null, null, 5, \"a\", [], [[1, \"target\", 0], [8, \"href\", 4]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i0.Éµnov(_v, 12).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i0.Éµdid(12, 671744, null, 0, i4.RouterLinkWithHref, [i4.Router, i4.ActivatedRoute, i3.LocationStrategy], { routerLink: [0, \"routerLink\"] }, null), i0.Éµpad(13, 1), (_l()(), i0.Éµeld(14, 0, null, null, 1, \"i\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Fate Seeker\"])), (_l()(), i0.Éµted(-1, null, [\" which I had started a Let's Play series on\"])), (_l()(), i0.Éµted(-1, null, [\". It is very time consuming to get through even a few dialogues, not to mention document everything. This made me gave up my endeavor for a while. If this tool becomes a success then I will try to pick up from where I left off (the introduction...). \"])), (_l()(), i0.Éµeld(18, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"I should first mention that Chinese OCR does not seem to be as reliable as English. There are a few difficulties in the Chinese language that may hinder my goal of going from an image to a word-by-word translation:\"])), (_l()(), i0.Éµeld(20, 0, null, 0, 8, \"ul\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(21, 0, null, null, 1, \"li\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"There are a ton of characters. To correctly identify most common texts, at least the 1500-2000 most frequent characters should be interpretable. \"])), (_l()(), i0.Éµeld(23, 0, null, null, 1, \"li\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Some characters have minuscule differences between them. A badly chosen font will probably cause trouble. \"])), (_l()(), i0.Éµeld(25, 0, null, null, 1, \"li\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The characters may be read left-to-right, right-to-left or top-to-bottom depending on the image.\"])), (_l()(), i0.Éµeld(27, 0, null, null, 1, \"li\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Characters/words may have a different pronunciation or meaning depending on the context they are in.\"])), (_l()(), i0.Éµeld(29, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Of course I started with the OCR part. I've tried a few repositories in the past that weren't reliable enough such as \"])), (_l()(), i0.Éµeld(31, 0, null, null, 1, \"a\", [[\"href\", \"https://tesseract.projectnaptha.com\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Tesseract\"])), (_l()(), i0.Éµted(-1, null, [\". These repositories keep improving over time so it is worth keeping an eye out for any new releases. But a repository that worked quite well with the few examples I had from Fate Seeker was \"])), (_l()(), i0.Éµeld(34, 0, null, null, 1, \"a\", [[\"href\", \"https://github.com/JaidedAI/EasyOCR\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"EasyOCR\"])), (_l()(), i0.Éµted(-1, null, [\". I might get better results when I look for Chinese repositories, but I can't read them yet so I shall work with the tools at my disposal.\"])), (_l()(), i0.Éµeld(37, 0, null, 0, 7, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"EasyOCR returns to me a list of identified character groups along with their bounding rectangle coordinates and accuracy. The accuracy represents how confident we are that the character has been identified correctly. With this list I can mark the identified areas of the screen. I chose to do this in an Angular project. With \"])), (_l()(), i0.Éµeld(39, 0, null, null, 1, \"a\", [[\"href\", \"https://www.electronjs.org/\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Electron\"])), (_l()(), i0.Éµted(-1, null, [\" on top of it I can build a desktop application. Electron is quite easy to get into and is helpful when you are already familiar with frontend technologies. The drawback is that it uses quite a lot of RAM for even basic funtionality. \"])), (_l()(), i0.Éµeld(42, 0, null, null, 1, \"a\", [[\"href\", \"https://flutter.dev/docs\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Flutter\"])), (_l()(), i0.Éµted(-1, null, [\" makes a strong competitor to Electron, but it offers only early stage support for Windows right now. It is also based on the less popular Dart language, but I consider that a benefit over Javascript based languages... To be sure I don't run into Windows related problems, I decided to go with Electron anway.\"])), (_l()(), i0.Éµeld(45, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"The next step is to segment the characters into words or stand-alone characters. As mentioned before, the meaning of a character is heavily dependent on the context. This means that two characters are not necessarily always grouped together to form a word since it depends on the sentence. I make use of another library \"])), (_l()(), i0.Éµeld(47, 0, null, null, 1, \"a\", [[\"href\", \"https://www.npmjs.com/package/nodejieba\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Nodejieba\"])), (_l()(), i0.Éµted(-1, null, [\" to take care of this complicated task for me. For each segmented word I further dissect it into subgroups until a single character is left. It is often easier to memorize the meaning of a word if the meaning of each individual character is understood. For example, a refrigerator (\\u51B0\\u7BB1) is made up of the characters 'ice' and 'box'. A refrigerator is after all an ice box.\"])), (_l()(), i0.Éµeld(50, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Lastly comes the easy part: translate each of the segmented characters/words. I make use of the \"])), (_l()(), i0.Éµeld(52, 0, null, null, 1, \"a\", [[\"href\", \"https://www.mdbg.net/chinese/dictionary?page=cc-cedict\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"CC-CEDICT library\"])), (_l()(), i0.Éµted(-1, null, [\", which has been actively maintained since 1997. It is very regularly updated and contains even new terms related to COVID-19.\"])), (_l()(), i0.Éµeld(55, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"We are almost there. I don't want to show all the translations all the time, so I created a transparent fullscreen overlay window that I can show/hide on top of my game with global hotkeys. I bound them to CTRL+ALT+F7/F8. The hotkeys become unbound when I close the program of course so they don't conflict with other programs. I also don't want to show all the translations at once since my screen will become very cluttered. I mark each identified group with a bounding rectangle to clearly show they have been identified and highlight the group on mouse hover. Upon clicking a group, a modal window appears that shows the translation for that group. The final result looks like this:\"])), (_l()(), i0.Éµeld(57, 0, null, 0, 3, \"figure\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(58, 0, null, null, 0, \"img\", [[\"alt\", \"\"], [\"class\", \"img-fluid rounded mb-4\"], [\"src\", \"assets/gifs/fateseeker/main_screen.gif\"]], null, null, null, null, null)), (_l()(), i0.Éµeld(59, 0, null, null, 1, \"figcaption\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Main screen\"])), (_l()(), i0.Éµeld(61, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"This example captures the main screen. I open the overlay with CTRL+ALT+F7 which starts immediately starts the screen capturing and interpreting process. The results from the title are not so good, probably due to the calligraphic writing and perhaps the background as well. The menu options have been captured correctly though and are very useful to me.\"])), (_l()(), i0.Éµeld(63, 0, null, 0, 4, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"I should emphasize that this is just a minimal working product. I am aware that no UX designer would approve of such a layout and the UI has been my bottom priority. Performance-wise I am very impressed however. It only takes about 2 to 3 seconds for the scanning to complete on average. This test has been performed on a 1920x1080 screen. To turn this into a viable product, the runtime should be improved a bit more in my opinion but OCR really has come a long way. On another note, the trailing mouse you can see in the gif was not there when I was performing this test. It comes from \"])), (_l()(), i0.Éµeld(65, 0, null, null, 1, \"a\", [[\"href\", \"https://www.screentogif.com/\"]], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"the gifrecorder that I was using\"])), (_l()(), i0.Éµted(-1, null, [\".\"])), (_l()(), i0.Éµeld(68, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Here's another example:\"])), (_l()(), i0.Éµeld(70, 0, null, 0, 3, \"figure\", [], null, null, null, null, null)), (_l()(), i0.Éµeld(71, 0, null, null, 0, \"img\", [[\"alt\", \"\"], [\"class\", \"img-fluid rounded mb-4\"], [\"src\", \"assets/gifs/fateseeker/character_screen.gif\"]], null, null, null, null, null)), (_l()(), i0.Éµeld(72, 0, null, null, 1, \"figcaption\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Character screen\"])), (_l()(), i0.Éµeld(74, 0, null, 0, 1, \"p\", [], null, null, null, null, null)), (_l()(), i0.Éµted(-1, null, [\"Considering that the model has not been trained on any data from this game but is general purpose oriented, makes it that much more amazing that the characters are interpreted so well. It manages to perform well despite all the background noise. I have no excuses left not to play the game!\"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.postTitle(); var currVal_1 = _co.postDate(); var currVal_2 = _co.postAbstract(); _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2); var currVal_5 = _ck(_v, 13, 0, \"/blogs/game/fs-intro\"); _ck(_v, 12, 0, currVal_5); }, function (_ck, _v) { var currVal_3 = i0.Éµnov(_v, 12).target; var currVal_4 = i0.Éµnov(_v, 12).href; _ck(_v, 11, 0, currVal_3, currVal_4); }); }\nexport function View_ChineseOcrToolComponent_Host_0(_l) { return i0.Éµvid(0, [(_l()(), i0.Éµeld(0, 0, null, null, 1, \"app-chinese-ocr-tool\", [], null, null, null, View_ChineseOcrToolComponent_0, RenderType_ChineseOcrToolComponent)), i0.Éµdid(1, 49152, null, 0, i5.ChineseOcrToolComponent, [], null, null)], null, null); }\nvar ChineseOcrToolComponentNgFactory = i0.Éµccf(\"app-chinese-ocr-tool\", i5.ChineseOcrToolComponent, View_ChineseOcrToolComponent_Host_0, {}, {}, []);\nexport { ChineseOcrToolComponentNgFactory as ChineseOcrToolComponentNgFactory };\n","<app-blog-post\r\n    [postTitle]=\"postTitle()\"\r\n    [postDate]=\"postDate()\"\r\n    [postAbstract]=\"postAbstract()\">\r\n\r\n    <p>The world of AI and image-based text recognition, or optical character recognition (OCR), is evolving quickly\r\n        the past decades. There are quite a few tools around that can scan images in many languages quite reliably for\r\n        English and other alphabet-like systems. It can often deal with certain levels of blur, background noise,\r\n        rotation and other mechanics that may interfere with interpreting the characters.</p>\r\n\r\n    <p>The quickly evolving power of hardware has no doubt contributed a lot. Better GPU's and more data sets allow more\r\n        accurate models to be trained. The rising computational power of the average end user allows results to be\r\n        gathered more quickly at runtime, which is necessary to create a feasible product.</p>\r\n\r\n    <p>I was inspired to develop a tool to detect Chinese characters from images. I am learning Chinese and have a blog\r\n        section dedicated to this, but I am improving at a slow pace due to the hassle of having to look up so\r\n        many characters. My aim as a developer is to simplify this manual labor and replace it with a tool that\r\n        <del>can do the work for me</del>\r\n        offers a guiding hand. Ideally, it would help me play the game\r\n        <a [routerLink]=\"['/blogs/game/fs-intro']\"><i>Fate Seeker</i> which I had started a Let's Play\r\n            series on</a>. It is very time consuming to get through even a few dialogues, not to mention document\r\n        everything. This made me gave up my endeavor for\r\n        a while. If this tool becomes a success then I will try to pick up from where I left off (the introduction...).\r\n    </p>\r\n\r\n    <p>I should first mention that Chinese OCR does not seem to be as reliable as English. There are a few difficulties\r\n        in the Chinese language that may hinder my goal of going from an image to a word-by-word translation:</p>\r\n    <ul>\r\n        <li>There are a ton of characters. To correctly identify most common texts, at least the 1500-2000 most\r\n            frequent characters should be interpretable.\r\n        </li>\r\n        <li>Some characters have minuscule differences between them. A badly chosen font will probably cause trouble.\r\n        </li>\r\n        <li>The characters may be read left-to-right, right-to-left or top-to-bottom depending on the image.</li>\r\n        <li>Characters/words may have a different pronunciation or meaning depending on the context they are in.</li>\r\n    </ul>\r\n\r\n    <p>Of course I started with the OCR part. I've tried a few repositories in the past that weren't reliable enough\r\n        such as <a href=\"https://tesseract.projectnaptha.com\">Tesseract</a>. These repositories keep improving over time\r\n        so it is worth keeping an eye out for any new releases. But a repository that worked quite well with the few\r\n        examples I had from Fate Seeker was <a href=\"https://github.com/JaidedAI/EasyOCR\">EasyOCR</a>. I might get\r\n        better results when I look for Chinese repositories, but I can't read them yet so I shall work with the tools at\r\n        my disposal.</p>\r\n\r\n    <p>EasyOCR returns to me a list of identified character groups along with their bounding rectangle\r\n        coordinates and accuracy. The accuracy represents how confident we are that the character has been identified\r\n        correctly. With this list I can mark the identified areas of the screen.\r\n        I chose to do this in an Angular project. With <a href=\"https://www.electronjs.org/\">Electron</a> on top of it I\r\n        can build a desktop application. Electron is quite easy to get into and is helpful when you are\r\n        already familiar with frontend technologies. The drawback is that it uses quite a lot of RAM for even basic\r\n        funtionality. <a href=\"https://flutter.dev/docs\">Flutter</a> makes a strong competitor to Electron, but it\r\n        offers only early stage support for Windows right now. It is also based on the less popular Dart language, but I\r\n        consider that a benefit over Javascript based languages... To be sure I don't run into Windows related problems,\r\n        I decided to go with Electron anway.</p>\r\n\r\n    <p>The next step is to segment the characters into words or stand-alone characters. As mentioned before, the meaning\r\n        of a character is heavily dependent on the context. This means that two characters are not necessarily always\r\n        grouped together to form a word since it depends on the sentence. I make use of another library\r\n        <a href=\"https://www.npmjs.com/package/nodejieba\">Nodejieba</a> to take care of this complicated task for me.\r\n        For each segmented word I further dissect it into subgroups until a single character is left. It is often easier\r\n        to memorize the meaning of a word if the meaning of each individual character is understood. For example, a\r\n        refrigerator (å°ç®±) is made up of the characters 'ice' and 'box'. A refrigerator is after all an ice box.</p>\r\n\r\n    <p>Lastly comes the easy part: translate each of the segmented characters/words. I make use of the\r\n        <a href=\"https://www.mdbg.net/chinese/dictionary?page=cc-cedict\">CC-CEDICT library</a>, which has been actively\r\n        maintained since 1997. It is very regularly updated and contains even new terms related to COVID-19.</p>\r\n\r\n    <p>We are almost there. I don't want to show all the translations all the time, so I created a transparent\r\n        fullscreen overlay window that I can show/hide on top of my game with global hotkeys. I bound them to\r\n        CTRL+ALT+F7/F8. The hotkeys become unbound when I close the program of course so they don't conflict with other\r\n        programs. I also don't want to show all the translations at once since my screen will become\r\n        very cluttered. I mark each identified group with a bounding rectangle to clearly show they have been identified\r\n        and highlight the group on mouse hover. Upon clicking a group, a modal window appears that shows the translation\r\n        for that group. The final result looks like this:</p>\r\n\r\n    <figure>\r\n        <img class=\"img-fluid rounded mb-4\" src=\"assets/gifs/fateseeker/main_screen.gif\" alt=\"\">\r\n        <figcaption>Main screen</figcaption>\r\n    </figure>\r\n\r\n    <p>This example captures the main screen. I open the overlay with CTRL+ALT+F7 which starts immediately starts the\r\n        screen capturing and interpreting process. The results from the title are not so good, probably due to the\r\n        calligraphic writing and perhaps the background as well. The menu options have been captured correctly though\r\n        and are very useful to me.</p>\r\n\r\n    <p>I should emphasize that this is just a minimal working product. I am aware that no UX designer would approve\r\n        of such a layout and the UI has been my bottom priority. Performance-wise I am very impressed however. It only\r\n        takes about 2 to 3 seconds for the\r\n        scanning to complete on average. This test has been performed on a 1920x1080 screen. To turn this into a viable\r\n        product, the runtime should be improved a bit more in my opinion but OCR really has come a long way.\r\n        On another note, the\r\n        trailing mouse you can see in the gif was not there when I was performing this test. It comes from\r\n        <a href=\"https://www.screentogif.com/\">the gifrecorder that I was using</a>.</p>\r\n\r\n    <p>Here's another example:</p>\r\n\r\n    <figure>\r\n        <img class=\"img-fluid rounded mb-4\" src=\"assets/gifs/fateseeker/character_screen.gif\" alt=\"\">\r\n        <figcaption>Character screen</figcaption>\r\n    </figure>\r\n\r\n    <p>Considering that the model has not been trained on any data from this game but is general purpose oriented, makes\r\n        it that much more amazing that the characters are interpreted so well. It manages to perform well despite all\r\n        the background noise. I have no excuses left not to play the game!</p>\r\n</app-blog-post>\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./developer-blog.module\";\nimport * as i2 from \"../../../../../node_modules/@angular/router/router.ngfactory\";\nimport * as i3 from \"./developer-blog.component.ngfactory\";\nimport * as i4 from \"./post/graphql/graphql.component.ngfactory\";\nimport * as i5 from \"./post/rs-hs/rs-hs.component.ngfactory\";\nimport * as i6 from \"./post/ng-piao-liang-hanzi/ng-plh.component.ngfactory\";\nimport * as i7 from \"./post/spectator-testing/spectator-testing.component.ngfactory\";\nimport * as i8 from \"./post/automated-devops/automated-devops.component.ngfactory\";\nimport * as i9 from \"./post/chinese-ocr-tool/chinese-ocr-tool.component.ngfactory\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/forms\";\nimport * as i12 from \"@angular/router\";\nimport * as i13 from \"../../../shared/blog-sidebar/category/blog-sidebar-category.module\";\nimport * as i14 from \"../../../shared/blog-sidebar/search/blog-sidebar-search.module\";\nimport * as i15 from \"../../../shared/blog-sidebar/blog-sidebar.module\";\nimport * as i16 from \"../../../shared/blog-overview/blog-overview.module\";\nimport * as i17 from \"../../../shared/blog-post/blog-post.module\";\nimport * as i18 from \"../../../shared/shared.module\";\nimport * as i19 from \"./developer-blog-routing.module\";\nimport * as i20 from \"ngx-highlightjs\";\nimport * as i21 from \"./developer-blog.component\";\nimport * as i22 from \"./post/graphql/graphql.component\";\nimport * as i23 from \"./post/rs-hs/rs-hs.component\";\nimport * as i24 from \"./post/ng-piao-liang-hanzi/ng-plh.component\";\nimport * as i25 from \"./post/spectator-testing/spectator-testing.component\";\nimport * as i26 from \"./post/automated-devops/automated-devops.component\";\nimport * as i27 from \"./post/chinese-ocr-tool/chinese-ocr-tool.component\";\nvar DeveloperBlogModuleNgFactory = i0.Éµcmf(i1.DeveloperBlogModule, [], function (_l) { return i0.Éµmod([i0.Éµmpd(512, i0.ComponentFactoryResolver, i0.ÉµCodegenComponentFactoryResolver, [[8, [i2.Éµangular_packages_router_router_lNgFactory, i3.DeveloperBlogComponentNgFactory, i4.GraphqlComponentNgFactory, i5.RsHsComponentNgFactory, i6.NgPlhComponentNgFactory, i7.SpectatorTestingComponentNgFactory, i8.AutomatedDevopsComponentNgFactory, i9.ChineseOcrToolComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.Éµmpd(4608, i10.NgLocalization, i10.NgLocaleLocalization, [i0.LOCALE_ID, [2, i10.Éµangular_packages_common_common_a]]), i0.Éµmpd(4608, i11.Éµangular_packages_forms_forms_o, i11.Éµangular_packages_forms_forms_o, []), i0.Éµmpd(1073742336, i10.CommonModule, i10.CommonModule, []), i0.Éµmpd(1073742336, i12.RouterModule, i12.RouterModule, [[2, i12.Éµangular_packages_router_router_a], [2, i12.Router]]), i0.Éµmpd(1073742336, i13.BlogSidebarCategoryModule, i13.BlogSidebarCategoryModule, []), i0.Éµmpd(1073742336, i11.Éµangular_packages_forms_forms_d, i11.Éµangular_packages_forms_forms_d, []), i0.Éµmpd(1073742336, i11.FormsModule, i11.FormsModule, []), i0.Éµmpd(1073742336, i14.BlogSidebarSearchModule, i14.BlogSidebarSearchModule, []), i0.Éµmpd(1073742336, i15.BlogSidebarModule, i15.BlogSidebarModule, []), i0.Éµmpd(1073742336, i16.BlogOverviewModule, i16.BlogOverviewModule, []), i0.Éµmpd(1073742336, i17.BlogPostModule, i17.BlogPostModule, []), i0.Éµmpd(1073742336, i18.SharedModule, i18.SharedModule, []), i0.Éµmpd(1073742336, i19.DeveloperBlogRoutingModule, i19.DeveloperBlogRoutingModule, []), i0.Éµmpd(1073742336, i20.HighlightModule, i20.HighlightModule, []), i0.Éµmpd(1073742336, i1.DeveloperBlogModule, i1.DeveloperBlogModule, []), i0.Éµmpd(1024, i12.ROUTES, function () { return [[{ path: \"\", component: i21.DeveloperBlogComponent }, { path: \"graphql\", data: i19.Éµ0, component: i22.GraphqlComponent }, { path: \"rs-hs\", data: i19.Éµ1, component: i23.RsHsComponent }, { path: \"ng-plh\", data: i19.Éµ2, component: i24.NgPlhComponent }, { path: \"spectator-test\", data: i19.Éµ3, component: i25.SpectatorTestingComponent }, { path: \"automated-devops\", data: i19.Éµ4, component: i26.AutomatedDevopsComponent }, { path: \"chinese-ocr-tool\", data: i19.Éµ5, component: i27.ChineseOcrToolComponent }]]; }, []), i0.Éµmpd(256, \"DEV_ROUTES\", i1.Éµ0, [])]); });\nexport { DeveloperBlogModuleNgFactory as DeveloperBlogModuleNgFactory };\n"]}